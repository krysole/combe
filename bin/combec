#!/usr/bin/env node
//
// Combe - A Parsing Extension for JavaScript
//
// Copyright 2015 Lorenz Pretterhofer <krysole@alexicalmistake.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
"use strict";

var nopt = require("nopt");
var path = require("path");
var fs = require("fs");

var combe = require("../index.js");



var Options = {
  "output": path,
  
  "version": Boolean,
  "help": Boolean,
  
  "debug-scan": Boolean,
  "debug-analyse": Boolean,
  "debug-translate": Boolean,
  
  "compile": Boolean,
};
var OptionShorthands = {
  "o": ["--output"],
  
  "v": ["--version"],
  "h": ["--help"],
};



var main = function () {
  var options = nopt(Options, OptionShorthands, process.argv, 2);
  var remaining = options.argv.remain;
  
  if (remaining.length === 0) {
    checkExclusiveOptions(options, ["version", "help", "debug-scan", "debug-analyse", "debug-translate", "compile"], "help");
  }
  else {
    checkExclusiveOptions(options, ["version", "help", "debug-scan", "debug-analyse", "debug-translate", "compile"], "compile");
  }
  
  
  
  if (options["help"]) {
    console.log("combec (" + require("../package.json").name + "-" + require("../package.json").version + ")");
    console.log();
    console.log("Usage: combec [-o targetpath] sourcepath");
    console.log("  [--compile        ]: (default with sourcepath) Produce compiled output.");
    console.log("  [--version        ]: Print \"project-version\" output.");
    console.log("  [--help           ]: (default without sourcepath) Print this message.");
    console.log()
    console.log("  [--debug-scan     ]: Produce scanner output.");
    console.log("  [--debug-analyse  ]: Produce analysed ast output.");
    console.log("  [--debug-translate]: Produce translated output.");
    console.log();
  }
  else if (options["version"]) {
    console.log(require("../package.json").name + "-" + require("../package.json").version);
  }
  else if (options["debug-scan"]) {
    checkRemainingOptions(remaining, 1, 1);
    
    var sourcepath = remaining[0];
    if (!fs.existsSync(sourcepath)) {
      console.error("sourcepath (" + sourcepath + ") does not exist.");
      process.exit(1);
    }
    
    var source = fs.readFileSync(sourcepath, "utf8");
    var hashbang = combe.Compiler.hashbang(source);
    var ast = combe.Compiler.scan(source, sourcepath, hashbang.length);
    var output = combe.show(ast);
    
    if (options["output"] != null) {
      fs.writeFileSync(options["output"], output);
    }
    else {
      console.log(output);
    }
  }
  else if (options["debug-analyse"]) {
    checkRemainingOptions(remaining, 1, 1);
    
    var sourcepath = remaining[0];
    if (!fs.existsSync(sourcepath)) {
      console.error("sourcepath (" + sourcepath + ") does not exist.");
      process.exit(1);
    }
    
    var source = fs.readFileSync(sourcepath, "utf8");
    var hashbang = combe.Compiler.hashbang(source);
    var ast = combe.Compiler.scan(source, sourcepath, hashbang.length);
    var analysedAst = combe.Compiler.analyse(ast);
    var output = combe.show(analysedAst);
    
    if (options["output"] != null) {
      fs.writeFileSync(options["output"], output);
    }
    else {
      console.log(output);
    }
  }
  else if (options["debug-translate"]) {
    checkRemainingOptions(remaining, 1, 1);
    
    var sourcepath = remaining[0];
    if (!fs.existsSync(sourcepath)) {
      console.error("sourcepath (" + sourcepath + ") does not exist.");
      process.exit(1);
    }
    
    var source = fs.readFileSync(sourcepath, "utf8");
    var hashbang = combe.Compiler.hashbang(source);
    var ast = combe.Compiler.scan(source, sourcepath, hashbang.length);
    var analysedAst = combe.Compiler.analyse(ast);
    var translatorOutput = combe.Compiler.translate(analysedAst);
    var output = combe.show(translatorOutput);
    
    if (options["output"] != null) {
      fs.writeFileSync(options["output"], output);
    }
    else {
      console.log(output);
    }
  }
  else if (options["compile"]) {
    checkRemainingOptions(remaining, 1, 1);
    
    var sourcepath = remaining[0];
    if (!fs.existsSync(sourcepath)) {
      console.error("sourcepath (" + sourcepath + ") does not exist.");
      process.exit(1);
    }
    
    var source = fs.readFileSync(sourcepath, "utf8");
    var output = combe.Compiler.compile(source, sourcepath);
    
    if (options["output"] != null) {
      fs.writeFileSync(options["output"], output);
    }
    else {
      console.log(output);
    }
  }
  else {
    throw new Error();
  }
};



var checkExclusiveOptions = function (options, exclusiveOptionNames, _default) {
  var found = exclusiveOptionNames.filter(function (name) {
    return (options[name] !== undefined);
  });
  
  if (found.length > 1) {
    if (_default != null) {
      console.error("Expected at most one of the options: " + exclusiveOptionNames.join(" ") + "; found: " + found.join(" ") + ".");
      process.exit(1);
    }
    else {
      console.error("Expected one of the options: " + exclusiveOptionNames.join(" ") + "; found: " + found.join(" ") + ".");
      process.exit(1);
    }
  }
  else if (found.length === 0) {
    if (_default != null) {
      options[_default] = true;
    }
    else {
      console.error("Expected one of the options: " + exclusiveOptionNames.join(" ") + ".");
      process.exit(1);
    }
  }
};

var checkRemainingOptions = function (remaining, min, max) {
  if (min != null && remaining.length < min) {
    console.error("Expected more than " + min + " trailing arguments.");
    process.exit(1);
  }
  if (max != null && remaining.length > max) {
    console.error("Expected more than " + max + " trailing arguments.");
  }
};

setTimeout(function () {
  return main();
}, 0);
