//
// Combe - A Parsing Extension for JavaScript
//
// Copyright 2015 Lorenz Pretterhofer <krysole@alexicalmistake.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
"use strict";

var ECMAScriptScanner = require("./ECMAScriptScanner.js");
var Ast = require("./CombeAst.js");



function CombeScanner(source, sourcename, skipLength) {
  ECMAScriptScanner.call(this, source, sourcename, skipLength);
  
  this.init("start", false);
  this.init("fragments", null);
  this.init("indent", 0);
};
CombeScanner.prototype = Object.create(ECMAScriptScanner.prototype);
CombeScanner.prototype.constructor = CombeScanner;
module.exports = CombeScanner;



CombeScanner.prototype.start = rule { scan?[] }



CombeScanner.prototype.scan = rule (filter) {
  push("start", true)
  push("enclosedBy", null)
  (
    ( ?(this.get("enclosedBy") == null) ~~ifNotNull(filter)
    | ?(this.get("enclosedBy") != null)
    )
    fragment:f set("start", false) !f
  )+:fs
  pop("enclosedBy")
  pop("start")
  !Ast("Composite", fs)
};



CombeScanner.prototype.fragment = rule {
| suppressNameColon

| trigger("rule")

| suppressDotIdentifierName
// | trigger("class") // For eventual basic ES6 support

| %ECMAScriptScanner.prototype.fragment:text !Ast("Fragment", text)
};



CombeScanner.prototype.trigger = rule (name) {
  ~~%this[name + "Trigger"]
  ( %this[name + "Syntax"]
  | error("Triggered syntax invalid (" + name + ").")
  )
};



CombeScanner.prototype.ruleTrigger = rule {
| id("rule")
| inferredName ws? id("rule")
};

CombeScanner.prototype.ruleSyntax = rule {
  inferredName?({ fragments: null, name: null }):inf
  id("rule") ws? id?:name ws? parameterList?:pf ws?
  pn('{') pattern:b pn('}')
  !Ast("Composite", [
    inf.fragments,
    Ast("Rule", this.get("indent"), name, inf.name, pf, b)
  ])
};

CombeScanner.prototype.parameterList = rule {
| pn("(") ws? pn(")")    !null
| pn("(") scan:f pn(")") !f
};



CombeScanner.prototype.pattern = rule {
  choicePattern
};

CombeScanner.prototype.choicePattern = rule {
  ( ws? pn("|") ws? | ws? ) choiceBranch:i
  ( ws? pn("|") ws? choiceBranch )*:r
  ws?
  !Ast("ChoicePattern", [i].concat(r))
};
CombeScanner.prototype.choiceBranch = rule {
| sequencePattern
| emptyPattern
};

CombeScanner.prototype.sequencePattern = rule {
  delimited1[chainPattern; ws | ws? pn(',') ws? ]:ps
  !( ps.length > 1 ? Ast("SequencePattern", ps) : ps[0] )
};

CombeScanner.prototype.chainPattern = rule {
  operatorPattern:p
  ( pn(":") id:name            !Ast("BindPattern", p, name):p
  | pn(":") operatorPattern:cp !Ast("ChainPattern", p, cp):p
  )*
  !p
};

CombeScanner.prototype.operatorPattern = rule {
| pn("&")         hashPattern:p         !Ast("LookaheadPattern",    p)
| pn("~") pn("~") hashPattern:p         !Ast("DoubleNegatePattern", p)
| pn("~")         hashPattern:p         !Ast("NegatePattern",       p)
|                 hashPattern:p pn("?") semanticBody:b
                                        !Ast("ChoicePattern", [p, Ast("ActionPattern", b)])
|                 hashPattern:p pn("?") !Ast("OptionalPattern",     p)
|                 hashPattern:p pn("*") !Ast("RepeatPattern",       p)
|                 hashPattern:p pn("+") !Ast("Repeat1Pattern",      p)
|                 hashPattern
};

CombeScanner.prototype.hashPattern = rule {
| pn("#") primaryPattern:p !Ast("HashPattern", p)
| primaryPattern
};

CombeScanner.prototype.primaryPattern = rule {
| bindPattern
| predicatePattern
| actionPattern
| callRulePattern
| callImmediatePattern
| objectPattern
| eachPattern
| stringPattern
| numberPattern
| regularExpressionPattern
| nestedArrayPattern
| nestedObjectPattern
| subpattern
| nextPattern
};

CombeScanner.prototype.bindPattern = rule {
  pn(":") id:name !Ast("BindPattern", Ast("NextPattern"), name)
};

CombeScanner.prototype.predicatePattern = rule {
  pn("?") semanticBody:b !Ast("PredicatePattern", b)
};

CombeScanner.prototype.actionPattern = rule {
  pn("!") semanticBody:b !Ast("ActionPattern", b)
};

CombeScanner.prototype.callRulePattern = rule {
  pn(".") id:name
  ( pn("(") ws? pn(")")                              !Ast("CallRulePattern", name, [])
  | pn("(") ~( ws? pn(")") ) scan:f pn(")")        !Ast("CallRulePattern", name, [f])
  | pn("[") delimited[pattern; pn(";")]:as pn("]") !Ast("CallRulePattern", name, as)
  |                                                     !Ast("CallRulePattern", name, [])
  )
};

CombeScanner.prototype.callImmediatePattern = rule {
  pn("%") semanticBody:b
  ( pn("(") ws? pn(")")                               !Ast("CallImmediatePattern", b, [])
  | pn("(") ~( ws? pn(")") ) scan:f pn(")")        !Ast("CallImmediatePattern", b, [f])
  | pn("[") delimited[pattern; pn(";")]:as pn("]") !Ast("CallImmediatePattern", b, as)
  |                                                     !Ast("CallImmediatePattern", b, [])
  )
};

CombeScanner.prototype.objectPattern = rule {
  pn("@") semanticBody:b !Ast("ObjectPattern", b)
};

CombeScanner.prototype.eachPattern = rule {
  pn("*") semanticBody:b !Ast("EachPattern", b)
};

CombeScanner.prototype.stringPattern = rule {
  st:text !Ast("StringPattern", text)
};

CombeScanner.prototype.numberPattern = rule {
  num:text !Ast("NumberPattern", text)
};

CombeScanner.prototype.regularExpressionPattern = rule {
  regex:text !Ast("RegularExpressionPattern", text)
};

CombeScanner.prototype.nestedArrayPattern = rule {
  pn("[") pattern:p pn("]") !Ast("NestedArrayPattern", p)
};

CombeScanner.prototype.nestedObjectPattern = rule {
  pn("{") delimited[propertyPattern; ws? pn(",") ws?] pn("}")
  !Ast("NestedObjectPattern", p)
};

CombeScanner.prototype.subpattern = rule {
  pn("(") pattern:p pn(")") !p
};

CombeScanner.prototype.nextPattern = rule {
  pn(":") ~id !Ast("NextPattern")
};

CombeScanner.prototype.emptyPattern = rule {
  !Ast("EmptyPattern")
};

CombeScanner.prototype.propertyPattern = rule {
| id:name pn(":") ws chainPattern:p
  !Ast("PropertyPattern", Ast("ExpressionSemanticBody", Ast("Fragment", name.quote())), p)
| st:name pn(":") ws chainPattern:p
  !Ast("PropertyPattern", Ast("ExpressionSemanticBody", Ast("Fragment", name)), p)
| pn("(") ~( ws pn(")") ) scan:f pn(")") pn(":") ws chainPattern:p
  !Ast("PropertyPattern", Ast("ExpressionSemanticBody", f), p)
};



CombeScanner.prototype.semanticBody = rule {
| pn("(") ~( ws? pn(")") ) scan:f pn(")") !Ast("ExpressionSemanticBody", f)
| pn("{") scan:f pn("}")                  !Ast("FunctionSemanticBody", f)
| scan[semanticBodyFilter]:f              !Ast("ExpressionSemanticBody", f)
};
CombeScanner.prototype.semanticBodyFilter = rule {
| regularExpressionLiteral | stringLiteral | numberLiteral
| nullLiteral | booleanLiteral
| identifierName
| pn("-") | pn(".") | pn("(") | pn("[") | pn("{")
};



CombeScanner.prototype.suppressNameColon = rule {
  id:f1 ~~pn(":")
  !f1
};



CombeScanner.prototype.suppressDotIdentifierName = rule {
  pn("."):f1 ws?:f2 id:f3
  !Ast("Composite", [f1, f2, f3])
};



CombeScanner.prototype.inferredName = rule {
| dotAssign
| propdeclAssign
| subscriptAssign
| variableAssign
};

CombeScanner.prototype.dotAssign = rule {
  pn("."):f1 ws?:f2 id:f3 ws?:f4 pn("="):f5 ws?:f6
  !({ name: f3, fragments: Ast("Composite", [f1, f2, f3, f4, f5, f6]) })
};

CombeScanner.prototype.propdeclAssign = rule {
  ( id:f1 | st:f1 !eval(f1) ):name ws?:f2 pn(":"):f3 ws?:f4
  !({ name: name, fragments: Ast("Composite", [f1, f2, f3, f4]) })
};

CombeScanner.prototype.subscriptAssign = rule {
  pn("["):f1 ws?:f2 st:f3 ws?:f4 pn("]"):f5 ws?:f6 pn("="):f7 ws?:f8
  !({ name: eval(f3), fragments: Ast("Composite", [f1, f2, f3, f4, f5, f6, f7, f8]) })
};

CombeScanner.prototype.variableAssign = rule {
  id:f1 ws?:f2 pn("="):f3 ws?:f4
  !({ name: f1, fragments: Ast("Composite", [f1, f2, f3, f4]) })
};



CombeScanner.prototype.id = rule (expected) {
  slice[identifierName]:text ?(expected == null || text == expected) !text
};

CombeScanner.prototype.pn = rule (expected) {
  slice[punctuator]:text ?(expected == null || text == expected) !text
};

CombeScanner.prototype.st = rule {
  slice[stringLiteral]
};

CombeScanner.prototype.num = rule {
  slice[numberLiteral]
};

CombeScanner.prototype.regex = rule {
  slice[regularExpressionLiteral]
};

CombeScanner.prototype.ws = rule {
  slice[ ( multilineComment | singlelineComment | spaces | newline )+ ]
};

CombeScanner.prototype.newline = rule {
  slice[ %ECMAScriptScanner.prototype.newline ]:text
  getPosition():start &( spaces? getPosition():end ) set("indent", end - start)
  !text
};
