//
// Combe/JS - A Parsing Language for JavaScript
//
// Copyright 2011 Lorenz Pretterhofer
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

define(['../Runtime', '../JSParser'], function (Runtime, JSParser) {
  'use strict';
  
  var JSLexer = JSParser.JSLexer;
  var Token = Runtime.Token;
  
  var CombeJSLexer = class CombeJSLexer (JSLexer) {
  
    identifierName: rule {
      matchedInput[idFirstChar idChar*]:text
    
      ( ?(text === 'null')
        identifierNameToken('null', ['identifierName'], text, null)
      
      | ?(text === 'true')
        identifierNameToken('true', ['boolean', 'identifierName'], text, true)
      
      | ?(text === 'false')
        identifierNameToken('false', ['boolean', 'identifierName'], text, false)
    
      | ?(['class', 'match', 'rule'].include(text))
        identifierNameToken(text, ['keyword', 'reservedWord', 'identifierName'], text)
    
      | ?(['get', 'set', 'describe'].include(text))
        identifierNameToken(text, ['identifier', 'identifierName'], text)
      
      | ?(text.isKeyword(text))
        identifierNameToken(text, ['keyword', 'reservedWord', 'identifierName'], text)
      
      | ?(text.isFutureReservedWord(text))
        identifierNameToken('futureReservedWord', ['reservedWord', 'identifierName'], text)
    
      | identifierNameToken('identifier', ['identifierName'], text, text)
      )
    },
  
    punctuation: rule {
      ( '...' | '..' | '->' | '#'
    
      | '{' | '}' | '(' | ')' | '[' | ']' | ';' | ',' | '.' ~digit -> '.'
      | '<<' | '>>>' | '>>' | '<=' | '>=' | '<' | '>'
      | '===' | '!==' | '==' | '!=' | '!'
      | '&&' | '||' | '&' | '|' | '++' | '--' | '+' | '-'
      | '*' | '%' | '~' | '?' | ':'
    
      ):text
      token(text, ['punctuation'])
    },
  
  };
  
  return CombeJSLexer;
});
