//
// Combe - A Parsing Extension for JavaScript
//
// Copyright 2015 Lorenz Pretterhofer <krysole@alexicalmistake.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
"use strict";

var ObjectGrammar = require("../ObjectGrammar.js");
var Ast = require("./CombeAst.js");



function Simplifier(source, sourcename, skipLength) {
  ObjectGrammar.call(this, source, sourcename, skipLength);
  
  this.init("start", false);
  this.init("fragments", null);
  this.init("indent", 0);
};
Simplifier.prototype = Object.create(ObjectGrammar.prototype);
Simplifier.prototype.constructor = Simplifier;
module.exports = Simplifier;



Simplifier.prototype.start = rule {
  preorderTransform[simplify]
};



Simplifier.prototype.simplify = rule {
  
| Ast("Choice")::choicePatterns:ps !Ast("Choice", ps)

| Ast("Sequence")::sequencePatterns:ps !Ast("Sequence", ps)

| Ast("Choice")::{ patterns: [ :p ] } !p

| Ast("Sequence")::{ patterns: [ :p ] } !p

| :

};



Simplifier.prototype.choicePatterns = rule {
| Ast("Choice")::{ patterns: [ choicePatterns*:ps ] } !ps.flatten1()
| :p                                                  ![p]
};

Simplifier.prototype.sequencePatterns = rule {
| Ast("Sequence")::{ patterns: [ sequencePatterns*:ps ] } !ps.flatten1()
| :p                                                      ![p]
};
