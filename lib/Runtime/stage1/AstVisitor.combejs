// Generated by Combe compiler (0.5.0)
"use strict";
if (!__combe_runtimeLoaded) throw new Error("Combe runtime not loaded");
(function () {
var __combe_this = null;
var __combe_return = null;
try {
(global.AstVisitor = (module.exports = Object.subclass("AstVisitor", (function () {
var __combe_object = {};
__combe_defineValueProperty(__combe_object, "visit", (function () {
var __combe_this = this;
var __combe_return = null;
var self = this;
var args = Array.slice(arguments);
try {
return (function () {
(function () { throw (__combe_return = { value: (function () {
var __combe_subject = self;
var __combe_name = "new";
var __combe_arguments = args;
return __combe_subject[__combe_name].apply(__combe_subject, __combe_arguments);
})().visitRoot() }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
return __combe_object;
})(), (function () {
var __combe_object = {};
__combe_defineValueProperty(__combe_object, "trace", false);
__combe_defineValueProperty(__combe_object, "order", null);
__combe_defineValueProperty(__combe_object, "visitUnspecified", (function (node) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () { throw Error.new(("AstVisitor cannot handle unspecified ast node type: " + node.type)); })();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "initialize", (function (rootNode) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(self.rootNode = rootNode);
(self.path = []);
(self.dynamicVariables = (function () {
var __combe_object = {};
return __combe_object;
})());
(self.gensymid = 0);
(/* if */ self.trace
? /* then */ (function () {
self.push("traceIndentation", 0);
})()
: /* else */ null);
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "gensym", (function (basename) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(function () { throw (__combe_return = { value: (basename + (self.gensymid++)) }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "visitRoot", (function () {
var __combe_this = this;
var __combe_return = null;
var self = this;
var rest = Array.slice(arguments);
try {
return (function () {
self.rootNode.fix();
(/* if */ self.trace
? /* then */ (function () {
console.log(("Tracing AstVisitor " + self.class.name));
})()
: /* else */ null);
(function () { throw (__combe_return = { value: (function () {
var __combe_subject = self;
var __combe_name = "visit";
var __combe_arguments = [self.rootNode];
__combe_arguments.pushAll(rest);
return __combe_subject[__combe_name].apply(__combe_subject, __combe_arguments);
})() }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "push", (function (name, value) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(/* if */ __combe_infixOperators["=="](self.dynamicVariables[name], null)
? /* then */ (function () {
(self.dynamicVariables[name] = []);
})()
: /* else */ null);
(function () { throw (__combe_return = { value: self.dynamicVariables[name].push(value) }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "pop", (function (name) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(function () { throw (__combe_return = { value: self.dynamicVariables[name].pop(name) }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "set", (function (name, value) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(function () { throw (__combe_return = { value: (self.dynamicVariables[name].top = value) }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "get", (function (name) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(function () { throw (__combe_return = { value: self.dynamicVariables[name].top }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "pushNode", (function (node) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(function () { throw (__combe_return = { value: self.path.push(node) }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "popNode", (function () {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(function () { throw (__combe_return = { value: self.path.pop() }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "visitChildren", (function (node) {
var __combe_this = this;
var __combe_return = null;
var self = this;
var rest = Array.slice(arguments, 1);
try {
return (function () {
(function () { throw (__combe_return = { value: (function () {
var __combe_subject = self;
var __combe_name = "visitAll";
var __combe_arguments = [node.children];
__combe_arguments.pushAll(rest);
return __combe_subject[__combe_name].apply(__combe_subject, __combe_arguments);
})() }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "visitAll", (function (nodes) {
var __combe_this = this;
var __combe_return = null;
var self = this;
var rest = Array.slice(arguments, 1);
try {
return (function () {
(function () { throw (__combe_return = { value: nodes.map((function (node) {
var __combe_this = this;
var __combe_return = null;
try {
return (function () {
var __combe_subject = self;
var __combe_name = "visit";
var __combe_arguments = [node];
__combe_arguments.pushAll(rest);
return __combe_subject[__combe_name].apply(__combe_subject, __combe_arguments);
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
})) }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "visit", (function (node) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
var result;
self.pushNode(node);
(/* if */ self.trace
? /* then */ (function () {
console.log(("  ".repeat(self.get("traceIndentation")) + node.type));
self.push("traceIndentation", (self.get("traceIndentation") + 1));
})()
: /* else */ null);
(/* if */ (__combe_infixOperators["=="](self.order, null) || ["in", "none", "no"].include(self.order))
? /* then */ (function () {
(result = self.handle(node));
})()
: /* else */ (/* if */ __combe_infixOperators["=="](self.order, "pre")
? /* then */ (function () {
(result = self.handle(node));
self.visitChildren(node);
})()
: /* else */ (/* if */ __combe_infixOperators["=="](self.order, "post")
? /* then */ (function () {
self.visitChildren(node);
(result = self.handle(node));
})()
: /* else */ assert(false))));
(/* if */ self.trace
? /* then */ (function () {
self.pop("traceIndentation");
})()
: /* else */ null);
self.popNode();
(function () { throw (__combe_return = { value: result }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "handle", (function (node) {
var __combe_this = this;
var __combe_return = null;
var self = this;
try {
return (function () {
(/* if */ __combe_infixOperators["!="](self[("visit" + node.type)], null)
? /* then */ (function () {
(function () { throw (__combe_return = { value: self[("visit" + node.type)](node) }); })();
})()
: /* else */ (function () {
(function () { throw (__combe_return = { value: self.visitUnspecified(node) }); })();
})());
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
return __combe_object;
})())));
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
})();