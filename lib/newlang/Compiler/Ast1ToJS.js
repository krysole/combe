//
// Combe - A Parsing Language for JavaScript
//
// Copyright 2011 Lorenz Pretterhofer
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
'use strict';

var Ast1 = require('./Ast1');

var Ast1ToJS = module.exports = Class.new(Object, {
  
  translateToIOList: function (ast) {
    ast.visit(this.new());
    
    return ast.code;
  },
  
  translate: function (ast) {
    return Array.deepJoinIOList(this.translateToIOList(ast));
  },
  
}, {
  
  visitUnspecified: function (ast) {
    throw Error.new('Unrecognized Ast Node');
  },
  
  
  visitFile: function (ast) { // [ body ]
    ast.visitChildren(this);
    
    ast.code = [
      '// Generated by Combe/Newlang Compiler\n',
      '\'use strict\';\n',
      'module.exports = (', ast.body.code, ');\n',
      '\n'
    ];
  },
  
  
  visitSequence: function (ast) { // [ statements ]
    ast.visitChildren(this);
    
    if (ast.statements.length === 0) {
      ast.code = 'null';
    }
    else if (ast.statements.length === 1) {
      ast.code = ast.statements[0].code;
    }
    else {
      ast.code = ['(function () {\n'];
      
      for (var i = 0; i < ast.statements.length - 1; i++) {
        ast.code.push([ast.statements[i].code, ';\n']);
      }
      ast.code.push(['return ', ast.statements.last.code, ';\n']);
      
      ast.code.push('})()');
    }
  },
  
  
  visitIf: function (ast) { // [ condition, consiquent, alternative ]
    ast.visitChildren(this);
    
    ast.code = [
      '(function () {\n',
        'if (', ast.condition.code, ') {\n',
          'return ', ast.consiquent.code, ';\n',
        '}\n',
        'else {\n',
          'return ', ast.alternative.code, ';\n',
        '}\n',
      '})()'
    ];
  },
  
  visitTryCatch: function (ast) { // [ tryblock, catchbinding, catchblock ]
    ast.visitChildren(this);
    
    ast.code = [
      '(function () {\n',
        'try {\n',
          'return ', ast.tryblock.code, ';\n',
        '}\n',
        'catch (', ast.catchbinding, ') {\n',
          'return ', ast.catchblock.code, ';\n',
        '}\n',
      '})()'
    ];
  },
  
  
  visitFunction: function (ast) { // [ parameters, variables, body ]
    ast.visitChildren(this);
    
    var parameters = ast.parameters.join(', ');
    var variables = null;
    if (ast.variables.length > 0) {
      variables = ['var ', ast.variables.join(', '), ';\n'];
    }
    
    ast.code = [
      '(function (', ast.parameters.join(', '), ') {\n',
        variables,
        'return ', ast.body.code, ';\n',
      '})'
    ];
  },
  
  
  visitThrow: function (ast) { // [ argument ]
    ast.visitChildren(this);
    
    ast.code = [
      '(function () { throw ', ast.argument.code, '; })()'
    ];
  },
  
  
  visitVariableLookup: function (ast) { // [ name ]
    ast.code = ast.name;
  },
  
  visitVariableAssignment: function (ast) { // [ name, rvalue ]
    ast.visitChildren(this);
    
    ast.code = [
      '(', ast.name, ' = ', ast.rvalue.code, ')'
    ];
  },
  
  
  visitPropertyLookup: function (ast) { // [ object, name ]
    ast.visitChildren(this);
    
    ast.code = [
      ast.object.code, '[', ast.name.code, ']',
    ];
  },
  
  visitPropertyAssignment: function (ast) { // [ object, name, rvalue ]
    ast.visitChildren(this);
    
    ast.code = [
      '(', ast.object.code, '[', ast.name.code, '] = ', ast.rvalue.code, ')'
    ];
  },
  
  
  visitMethodCall: function (ast) { // [ object, name, arguments ]
    ast.visitChildren(this);
    
    var args = ast.arguments.map(function (arg) {
      return arg.code;
    }).interpolate(', ');
    
    ast.code = [
      ast.object.code, '.', ast.name, '(', args, ')'
    ];
  },
  
  visitCall: function (ast) { // [ function, arguments ]
    ast.visitChildren(this);
    
    var args = ast.arguments.map(function (arg) {
      return arg.code;
    }).interpolate(', ');
    
    ast.code = [
      ast.function.code, '(', args, ')'
    ];
  },
  
  
  visitThis: function (ast) { // [ ]
    ast.code = 'this';
  },
  
  visitNull: function (ast) { // [ ]
    ast.code = 'null';
  },
  
  visitUndefined: function (ast) { // [ ]
    ast.code = 'undefined';
  },
  
  visitTrue: function (ast) { // [ ]
    ast.code = 'true';
  },
  
  visitFalse: function (ast) { // [ ]
    ast.code = 'false';
  },
  
  visitString: function (ast) { // [ value ]
    ast.code = ast.value.quote();
  },
  
  visitNumber: function (ast) { // [ value ]
    ast.code = ast.value.toString();
  },
  
  
  visitPostIncrementedVariableLookup: function (ast) { // [ name ]
    ast.code = [
      '(', ast.name, '++)'
    ];
  },
  
  visitInfixOperator: function (ast) { // [ opname, lhs, rhs ]
    ast.visitChildren(this);
    
    ast.code = [
      '(', ast.lhs.code, ' ', ast.opname, ' ', ast.rhs.code, ')'
    ];
  },
  
  visitObjectLiteral: function (ast) { // [ propertyDeclarations ]
    ast.visitChildren(this);
    
    var pdecls = ast.propertyDeclarations.map(function (pdecl) {
      return pdecl.code;
    }).interpolate(', ');
    
    ast.code = [
      '({', pdecls, '})'
    ];
  },
  
  visitValuePropertyDeclaration: function (ast) { // [ name, value ]
    ast.visitChildren(this);
    
    ast.code = [
      ast.name.quote(), ': ', ast.value.code
    ];
  },
  
  visitWhile: function (ast) { // [ condition, body ]
    ast.visitChildren(this);
    
    ast.code = [
      '(function () {\n',
        'while (', ast.condition.code, ') {\n',
          'return ', ast.body.code, ';\n',
        '}\n',
      '})'
    ];
  },
  
  visitDoWhile: function (ast) { // [ body, condition ]
    ast.visitChildren(this);
    
    ast.code = [
      '(function () {\n',
        'do {\n',
          'return ', ast.body.code, ';\n',
        '} while (', ast.condition.code, ');\n',
      '})'
    ];
  },
  
});
