//
// Combe - A Parsing Language for JavaScript
//
// Copyright 2011 Lorenz Pretterhofer
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
'use strict';

var BaseParser = require('./BaseParser');

var Ast = require('./CombeAst');
var CombeLexer = require('./CombeLexer');

var CombeParser = module.exports = Class.new(BaseParser, {
  
  parseScript: function (source, filename) {
    return this.parse(source, filename, 'script');
  },
  
  parse: function (source, filename, rulename) {
    var rest = Array.slice(arguments, 3);
    if (filename == null) filename = '(unnamed)';
    
    var parser = this.new(source, filename);
    var result = parser.match.apply(parser, [rulename].concat(rest));
    if (!result) {
      var t = parser.tokens.last;
      var lc = (t != null ? source.lineColumnAt(t.position).join(':') : '-1');
      var text = (t != null ? '[' + t.text + '] ' : '');
      throw Error.new('Combe Parser Failed: Furthest token was ' + text + filename + ':' + lc);
    }
    return result;
  },
  
}, {
  
  initialize: function (source, filename) {
    BaseParser.prototype.initialize.call(this, source);
    
    this.filename = filename;
    
    this.lexer = CombeLexer.new(source, filename);
    this.tokens = [];
    this.furthestToken = { position: 0, text: '<<notoken>>' };
  },
  
  
  script: rule {
    terminatedStatement*:stmts eof
    -> Ast.Script(stmts)
  },
  
  
  terminatedStatement: rule {
    statement:stmt ';' -> stmt
  },
  
  statement: rule {
    | defStatement
    | varStatement
    
    | expressionStatement
    | emptyStatement
  },
  
  defStatement: rule {
    id('def') variableIdentifier:name parameters:args functionBody:stmts
    -> Ast.DefStatement(name, args, stmts)
  },
  
  varStatement: rule {
    id('var') delimited1[variableDeclaration, ',']:decls
    -> Ast.VarStatement(decls)
  },
  
  variableDeclaration: rule {
    variableIdentifier:name ( '=' expression:expr )?
    -> Ast.VariableDeclaration(name, expr)
  },
  
  expressionStatement: rule {
    ~( id('function') ) expression:expr
    -> Ast.ExpressionStatement(expr)
  },
  
  emptyStatement: rule {
    -> Ast.EmptyStatement()
  },
  
  
  expression: rule {
    | ifExpression
    | whileExpression
    | doWhileExpression
    | forExpression
    
    | tryCatchExpression
    | throwExpression
    
    | returnExpression
    | breakExpression
    | continueExpression
    | debuggerExpression
    
    | operatorExpression
  },
  
  ifExpression: rule {
    id('if') '(' expression:condition ')' body?:consiquent
    ( ?(consiquent != null) id('else') body:alternative )?
    -> Ast.IfExpression(condition, consiquent, alternative)
  },
  
  whileExpression: rule {
    id('while') '(' expression:condition ')' body?:b
    -> Ast.WhileExpression(condition, b)
  },
  
  doWhileExpression: rule {
    id('do') body:b id('while') '(' expression:condition ')'
    -> Ast.DoWhileExpression(b, condition)
  },
  
  forExpression: rule {
    | id('for') '('
        expression?:initExpr ';' 
        expression?:condExpr ';'
        expression?:incExpr ')' body?:b
      -> Ast.ForExpression(initExpr, condExpr, incExpr, b)
    | id('for') '('
        id('var') delimited1[variableDeclaration, ',']:decls ';'
        expression?:condExpr ';'
        expression?:incExpr ')' body?:b
      -> Ast.ForDeclaringExpression(decls, condExpr, incExpr, b)
  },
  
  tryCatchExpression: rule {
    id('try') body:tryBody
    ( id('catch') '(' variableIdentifier:catchBinding ')' body:catchBody
      ( id('finally') body:finallyBody )?
    | id('finally') body:finallyBody
    )
    -> Ast.TryCatchExpression(tryBody, catchBinding, catchBody, finallyBody)
  },
  
  throwExpression: rule {
    id('throw') expression:expr
    -> Ast.ThrowExpression(expr)
  },
  
  returnExpression: rule {
    id('return') expression?:expr
    -> Ast.ReturnExpression(expr)
  },
  
  breakExpression: rule {
    id('break')
    -> Ast.BreakExpression()
  },
  
  continueExpression: rule {
    id('continue')
    -> Ast.ContinueExpression()
  },
  
  
  body: rule {
    | expression
    | block
  },
  
  block: rule {
    '{' terminatedStatement*:stmts '}'
    -> Ast.Block(stmts)
  },
  
  
  id: rule (expectedName) {
    'identifier':name ?(name.text === expectedName) -> name
  },
  
  variableIdentifier: rule {
    'identifier':name ?(!name.reserved) -> name.text
  },
  
  propertyName: rule {
    | 'identifier':t -> t.text
    | 'string':t     -> t.value
    | 'number':t     -> t.text
  },
  
  
  operatorExpression: rule {
    assignmentExpression
  },
  
  assignmentExpression: rule {
    | secondaryExpression:lhs
      ( '=' expression:rhs
        -> Ast.Assignment(lhs, rhs)
      | 'operatorAssignment':op expression:rhs
        -> Ast.OperatorAssignment(op, lhs, rhs)
      )
    | conditionalExpression
  },
  
  conditionalExpression: rule {
    logicalOrExpression:condition
    ( '?' expression:consiquent
      ':' expression:alternative
      -> Ast.IfExpression(condition, consiquent, alternative)
    | -> condition
    )
  },
  
  logicalOrExpression: rule {
    leftAssociative[logicalAndExpression, '||']
  },
  logicalXorExpression: rule {
    leftAssociative[bitwiseXorExpression, '^^']
  },
  logicalAndExpression: rule {
    leftAssociative[equalityExpression, '&&']
  },
  
  equalityExpression: rule {
    leftAssociative[relationalExpression, ('=='|'!=')]
  },
  relationalExpression: rule {
    leftAssociative[bitwiseOrExpression, ('<'|'<='|'>='|'>')]
  },
  
  bitwiseOrExpression: rule {
    leftAssociative[bitwiseXorExpression, '|']
  },
  bitwiseXorExpression: rule {
    leftAssociative[bitwiseAndExpression, '^']
  },
  bitwiseAndExpression: rule {
    leftAssociative[shiftExpression, '&']
  },
  
  shiftExpression: rule {
    leftAssociative[additiveExpression, ('<<'|'>>'|'>>>')]
  },
  additiveExpression: rule {
    leftAssociative[multiplicitiveExpression, ('+'|'-')]
  },
  multiplicitiveExpression: rule {
    leftAssociative[rangeExpression, ('*'|'/'|'%')]
  },
  
  rangeExpression: rule {
    prefixExpression:expr
    ( '..' (rangeInfinity | prefixExpression):rhs
      -> Ast.InclusiveRange(expr, rhs)
    | '...' (rangeInfinity | prefixExpression):rhs
      -> Ast.ExclusiveRange(expr, rhs)
    | -> expr
    )
  },
  rangeInfinity: rule {
    '*' -> Ast.Null()
  },
  
  prefixExpression: rule {
    | ('++'|'--'|'+'|'-'|'~'|'!'):op prefixExpression:expr
      -> Ast.PrefixOperator(op.text, expr)
    | postfixExpression
  },
  
  postfixExpression: rule {
    secondaryExpression:expr
    ( ('++'|'--'):op
      -> Ast.PostfixOperator(op.text, expr)
    | -> expr
    )
  },
  
  
  leftAssociative: rule (operand, operator) {
    operand:expr
    ( operator:op operand:rhs
      !(expr = Ast.InfixOperator(op.text, expr, rhs))
    )*
    -> expr
  },
  rightAssociative: rule (operand, operator) {
    operand:expr
    ( operator:op rightAssociative(operand, operator):rhs
      -> Ast.InfixOperator(op.text, expr, rhs)
    | -> expr
    )
  },
  
  
  secondaryExpression: rule {
    primaryExpression:expr
    ( secondaryExpressionFragment(expr):expr )*
    -> expr
  },
  
  secondaryExpressionFragment: rule (subject) {
    | arguments:args
      -> Ast.Call(subject, args)
    | '[' delimited[expression, ',']:args ']'
      -> Ast.Subscript(subject, args)
    | '@' 'identifier':name
      -> Ast.State(subject, name)
    | '.' 'identifier':name arguments?:args
      -> Ast.MethodCall(subject, name.text, args)
  },
  
  
  arguments: rule {
    '(' delimited[expression, ',']:args ')' -> args
  },
  
  parameters: rule {
    '(' delimited[variableIdentifier, ',']:args ')' -> args
  },
  
  functionBody: rule {
    | '->' expression
    | block
  },
  
  
  primaryExpression: rule {
    | valueLiteral
    | id('this') -> Ast.This()
    | variableIdentifier:name -> Ast.Variable(name)
    | arrayLiteral
    | objectLiteral
    | functionLiteral
    | subexpression
  },
  
  valueLiteral: rule {
    ( id('null')  -> null
    | id('undefined') -> undefined
    | id('true')  -> true
    | id('false') -> false
    | 'number':n  -> n.value
    | 'string':s  -> s.value
    | 'regex':r   -> r.value
    ):value
    -> Ast.Literal(value)
  },
  
  arrayLiteral: rule {
    '[' delimited[arrayElement, ',']:elems ','? ']'
    !{ if (elems.last.is('Elision')) elems.pop(); }
    -> Ast.Array(elems)
  },
  arrayElement: rule {
    | expression
    | -> Ast.Null() // Elision
  },
  
  objectLiteral: rule {
    '{' delimited[property, ',']:decls ','? '}'
    -> Ast.Object(decls)
  },
  
  property: rule {
    | propertyName:name propertyValue:pv
      -> Ast.ValueProperty(name, pv)
    | id('get') propertyName:name propertyValue:pv
      -> Ast.GetProperty(name, pv)
    | id('set') propertyName:name propertyValue:pv
      -> Ast.SetProperty(name, pv)
    | id('describe') propertyName:name ':' expression:expr
      -> Ast.DescribeProperty(name, expr)
  },
  propertyValue: rule {
    | ':' expression:expr
    | parameters?:params functionBody:body
      -> Ast.Function(params, body)
  },
  
  functionLiteral: rule {
    | parameters?:params '->' (expression | block):stmts
      -> Ast.Function(params, stmts)
    | variableIdentifier:p '->' (expression | block):stmts
      -> Ast.Function([p], stmts)
  },
  
  subexpression: rule {
    '(' expressionSequence:expr ')' -> expr
  },
  
  expressionSequence: rule {
    delimited1[expression, ',']:exprs ','?
    ( ?(exprs.length === 1)
      -> exprs[0]
    | -> Ast.SequenceExpression(exprs)
    )
  },
  
  
  t: function (typename) {
    var token = this.next();
    if (token.type === typename) {
      return token;
    }
    else {
      this.fail();
    }
  },
  
  peekNext: function () {
    return this.tokenAt(this.position);
  },
  
  next: function () {
    return this.tokenAt(this.position++);
  },
  
  eof: rule {
    'eof'
  },
  
  tokenAt: function (position) {
    var token;
    
    assert(position < this.tokens.length + 1);
    if (position >= this.tokens.length) {
      assert(this.tokens.isEmpty() || this.tokens.last.type !== 'eof');
      
      this.tokens.push(this.lexer.nextToken());
    }
    
    return this.tokens[position];
  },
  
  stringPatternHandler: rule (string) {
    t(string)
  },
  
  ws: function () {
    if (this.position === 0) {
      return true;
    }
    else {
      var lastToken = this.tokenAt(this.position - 1);
      var currentToken = this.peekNext();
      if (currentToken.type === 'eof') {
        return true;
      }
      else if (lastToken.position + lastToken.length < currentToken.position) {
        return true;
      }
      else {
        this.fail();
      }
    }
  },
      

});
