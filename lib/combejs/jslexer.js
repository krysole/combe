// Generated by Combe/JS Compiler

var util = require('./util');
var Range = require('./range');

// Header ->

  var Token = require('./token');
  var BaseTextParser = require('../base_text_parser');

// <- Header

var ParentParser = (BaseTextParser);

var JSLexer = module.exports = function () {
  ParentParser.call(this);
};

util.extend((JSLexer.prototype = Object.create(ParentParser.prototype)), {

token: function (type, tags, value) {
return this._apply((function () {
      var endPosition = this.input.position;
      var token = new Token({
        type: type,
        tags: tags,
        value: value,
        startPosition: this.tokenStartPosition,
        endPosition: endPosition,
        previousToken: this.lastToken
      });
      
      if (!token.is('whitespace')) {
        for (var t = this.lastToken; t.is('whitespace'); t = t.previousToken) {
          if (t.is('newline')) {
            token.precededByNewline = true;
            break;
          }
        }
      }
      
      if (this.lastToken != null) {
        this.lastToken.nextToken = token;
      }
      this.lastToken = token;
      
      this.tokenStartPosition = endPosition;
      
      return token;
    }));
},

nextToken: function () {
return this._apply((function () {return this._concat(this.whitespace,
(function () {return this._choice(this.identifierName,
this.punctuation,
this.number,
this.string,
(function () {return this._concat((function () {return this._lookahead((function () {return this._choice(this.div,
this.regex);}));}),
(function () {return this._apply(this.token, 'unknown', (['div/regex']));}));}));}));}));
},

replaceUnknownWithDivision: function () {
return this._apply((function () {return this._apply(this.replaceUnknownWith, this.division);}));
},

replaceUnknownWithRegex: function () {
return this._apply((function () {return this._apply(this.replaceUnknownWith, this.regex);}));
},

replaceUnknownWith: function (what) {
return this._apply((function () {return this._concat((function () {return this._predicate((function () {return (this.lastToken.type.is('unknown'));}));}),
(function () {
      var lastToken = this.lastToken.lastToken;
      
      var token = this._apply(what);
      
      lastToken.nextToken = token;
      token.previousToken = lastToken;
      
      return token;
    }));}));
},

sourceChar: function () {
return this._apply(this.char);
},

identifierName: function () {
var text;
return this._apply((function () {return this._concat((function () {return (text = this._apply((function () {return this._apply(this.matchedInput, (function () {return this._concat(this.idFirstChar,
(function () {return this._repeat(this.idChar);}));}));})));}),
(function () {return this._choice((function () {return this._concat((function () {return this._predicate((function () {return (text === 'null');}));}),
(function () {return this._apply(this.token, 'null', (['identifierName']), this.null);}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (text === 'true');}));}),
(function () {return this._apply(this.token, 'boolean', (['true', 'identifierName']), this.true);}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (text === 'false');}));}),
(function () {return this._apply(this.token, 'boolean', (['false', 'identifierName']), this.false);}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (text.isKeyword(text));}));}),
(function () {return this._apply(this.token, text, (['keyword', 'reservedWord', 'identifierName']));}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (text.isFutureReservedWord(text));}));}),
(function () {return this._apply(this.token, 'futureReservedWord', (['reservedWord', 'identifierName']));}));}),
(function () {return this._apply(this.token, 'identifier', (['identifierName']), text);}));}));}));
},

idFirstChar: function () {
return this._apply((function () {return this._apply(this.char, (new Range('a', 'z')), (new Range('A', 'Z')), '_', '$');}));
},

idChar: function () {
return this._apply((function () {return this._apply(this.char, (new Range('a', 'z')), (new Range('A', 'Z')), '_', '$', (new Range('0', '9')));}));
},

punctuation: function () {
var text;
return this._apply((function () {return this._concat((function () {return (text = this._apply((function () {return this._choice('{',
'}',
'(',
')',
'[',
']',
'.',
';',
',',
'<',
'>',
'<=',
'>=',
'==',
'!=',
'===',
'!==',
'+',
'-',
'*',
'%',
'&',
'|',
'^',
'!',
'~',
'&&',
'||',
'?',
':',
'++',
'--',
'<<',
'>>',
'>>>',
'=',
'+=',
'-=',
'*=',
'%=',
'&=',
'|=',
'^=',
'<<=',
'>>=',
'>>>=');})));}),
(function () {return this._apply(this.token, text, (['punctuation']));}));}));
},

division: function () {
var text;
return this._apply((function () {return this._concat((function () {return (text = this._apply((function () {return this._choice('/',
'/=');})));}),
(function () {return this._apply(this.token, text, (['punctuation']));}));}));
},

number: function () {
return this._apply((function () {return this._choice(this.decimal,
this.hexInteger);}));
},

decimal: function () {
var text;
return this._apply((function () {return this._concat((function () {return (text = this._apply((function () {return this._apply(this.matchedInput, (function () {return this._choice((function () {return this._concat(this.integer,
(function () {return this._optional((function () {return this._concat('.',
(function () {return this._repeat(this.digit);}));}));}),
(function () {return this._optional((function () {return this._concat((function () {return this._choice('e',
'E');}),
(function () {return this._choice('+',
'-',
this.nothing);}),
(function () {return this._repeat1(this.digit);}));}));}));}),
(function () {return this._concat('.',
(function () {return this._repeat1(this.digit);}),
(function () {return this._optional((function () {return this._concat((function () {return this._choice('e',
'E');}),
(function () {return this._choice('+',
'-',
this.nothing);}),
(function () {return this._repeat1(this.digit);}));}));}));}));}));})));}),
(function () {return this._not(this.idChar);}),
(function () {return this._apply(this.token, 'number', (['decimal']), (parseFloat(text)));}));}));
},

integer: function () {
return this._apply((function () {return this._concat((function () {return this._apply(this.char, (new Range('1', '9')));}),
(function () {return this._repeat(this.digit);}));}));
},

digit: function () {
return this._apply((function () {return this._apply(this.char, (new Range('0', '9')));}));
},

hexInteger: function () {
var text;
return this._apply((function () {return this._concat((function () {return this._choice('0x',
'0X');}),
(function () {return (text = this._apply((function () {return this._apply(this.matchedInput, (function () {return this._repeat1(this.hexDigit);}));})));}),
(function () {return this._not(this.idChar);}),
(function () {return this._apply(this.token, 'number', (['hex']), (parseInt(text, 16)));}));}));
},

hexDigit: function () {
return this._apply((function () {return this._apply(this.char, (new Range('0', '9')), (new Range('a', 'f')), (new Range('A', 'F')));}));
},

string: function () {
var text;
return this._apply((function () {return this._concat((function () {return (this.currentStringChars = '');}),
(function () {return this._choice((function () {return this._apply(this.stringHelper, '\'');}),
(function () {return this._apply(this.stringHelper, '\"');}));}),
(function () {return (text = this._apply((function () {
      var s = this.currentStringChars;
      this.currentStringChars = null;
      return s;
    })));}),
(function () {return this._apply(this.token, 'string', this.null, text);}));}));
},

stringHelper: function (quoteChar) {
var c;
return this._apply((function () {return this._concat((function () {return (c = this._apply(quoteChar));}),
(function () {return (this.currentStringChars += c);}),
(function () {return this._repeat((function () {return this._concat((function () {return this._not(quoteChar);}),
(function () {return (c = this._apply(this.stringChar));}),
(function () {return (this.currentStringChars += c);}),
(function () {return ( c);}));}));}),
(function () {return (c = this._apply(quoteChar));}),
(function () {return (this.currentStringChars += c);}));}));
},

stringChar: function () {
return this._apply((function () {return this._choice((function () {return this._concat('\\',
this.stringEscapeSequence);}),
(function () {return this._concat('\\',
this.newline);}),
(function () {return this._concat((function () {return this._not(this.newline);}),
this.sourceChar);}));}));
},

stringEscapeSequence: function () {
return this._apply((function () {return this._choice('\'',
'\"',
'\\',
'b',
'f',
'n',
'r',
't',
'v',
(function () {return this._concat('0',
(function () {return this._not(this.digit);}));}),
(function () {return this._concat('x',
this.hexDigit,
this.hexDigit);}),
(function () {return this._concat('u',
this.hexDigit,
this.hexDigit,
this.hexDigit,
this.hexDigit);}),
(function () {return this._concat((function () {return this._not((function () {return this._choice(this.newline,
this.digit);}));}),
this.sourceChar);}));}));
},

regex: function () {
var pattern, options;
return this._apply((function () {return this._concat('/',
(function () {return (pattern = this._apply((function () {return this._apply(this.matchedInput, (function () {return this._concat((function () {return this._not('*');}),
this.regexChar,
(function () {return this._repeat(this.regexChar);}));}));})));}),
'/',
(function () {return (options = this._apply((function () {return this._apply(this.matchedInput, (function () {return this._repeat(this.idChar);}));})));}),
(function () {return this._apply(this.token, 'regex', this.null, (new Regexp(pattern, options)));}));}));
},

regexChar: function () {
return this._apply((function () {return this._choice((function () {return this._concat('\\',
(function () {return this._not(this.newline);}),
this.sourceChar);}),
this.regexCharacterClass,
(function () {return this._concat((function () {return this._not((function () {return this._choice('/',
this.newline);}));}),
this.sourceChar);}));}));
},

regexCharacterClass: function () {
return this._apply((function () {return this._concat('[',
this.regexCharacterClassChar,
']');}));
},

regexCharacterClassChar: function () {
return this._apply((function () {return this._choice((function () {return this._concat('\\',
(function () {return this._not(this.newline);}),
this.sourceChar);}),
(function () {return this._concat((function () {return this._not((function () {return this._choice(']',
this.newline);}));}),
this.sourceChar);}));}));
},

whitespace: function () {
return this._apply((function () {return this._repeat((function () {return this._choice(this.spaces,
this.newline,
this.comment);}));}));
},

spaces: function () {
return this._apply((function () {return this._concat((function () {return this._apply(this.char, ' \t\v\f\u00a0\u200c\u200d\ufeff');}),
(function () {return this._apply(this.token, 'spaces', (['whitespace']));}));}));
},

newline: function () {
return this._apply((function () {return this._concat((function () {return this._choice('\r\n',
(function () {return this._apply(this.char, '\n\r\u2028\u2029');}));}),
(function () {return this._apply(this.token, 'newline', (['whitespace']));}));}));
},

comment: function () {
return this._apply((function () {return this._concat((function () {return this._choice((function () {return this._concat('//',
(function () {return this._repeat((function () {return this._concat((function () {return this._not(this.newline);}),
this.sourceChar);}));}),
(function () {return this._choice(this.newline,
this.eof);}));}),
(function () {return this._concat('/*',
(function () {return this._repeat((function () {return this._concat((function () {return this._not('*/');}),
this.sourceChar);}));}),
'*/');}));}),
(function () {return this._apply(this.token, 'comment', (['whitespace']));}));}));
}

});
