//
// Combe/JS - A Parsing Language for JavaScript
//
// Copyright 2011 Lorenz Pretterhofer
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

combe CombeASTChoiceConcatOptimization {
  
  rule recur {
    [transform:result] -> result
  }

  rule transform {
    | 'Grammar' :name [recur*:rules] -> ['Grammar', name, rules]
    
    | 'Rule' :name :args :vars recur:expr -> ['Rule', name, args, vars, expr]
    
    | 'Choice' (recur:expr -> {
          if (expr[0] === 'Choice') {
            return expr.slice(1);
          } else {
            return [expr];
          }
        })+:exprs -> ['Choice'].concat(exprs.flatten1())
    
    | 'Concat' (recur:expr -> {
          if (expr[0] === 'Concat') {
            return expr.slice(1);
          } else {
            return [expr];
          }
        })+:exprs -> ['Concat'].concat(exprs.flatten1())
    
    | 'Action' recur:jsExpr -> ['Action', jsExpr]
    
    | 'Bind' :name recur:expr -> ['Bind', name, expr]
    
    | 'Not' recur:expr -> ['Not', expr]
    
    | 'Lookahead' recur:expr -> ['Lookahead', expr]
    
    | 'Repeat' recur:expr -> ['Repeat', expr]
    
    | 'Repeat1' recur:expr -> ['Repeat1', expr]
    
    | 'Optional' recur:expr -> ['Optional', expr]
    
    | 'Token' recur:expr -> ['Token', expr]
    
    | 'Predicate' recur:jsExpr -> ['Predicate', jsExpr]
    
    | 'Apply' recur:expr [recur*:argExprs] -> ['Apply', expr, argExprs]
                         
    | 'Apply' recur:expr -> ['Apply', expr]
    
    | 'ImmediateAction' recur:jsExpr -> ['ImmediateAction', jsExpr]
    
    | 'Destructure' recur:expr -> ['Destructure', expr]
    
    | 'Range' recur:leftExpr recur:rightExpr -> ['Range', leftExpr, rightExpr]
    
    | 'Infinity' -> ['Infinity']
    
    | 'String' :string -> ['String', string]
    
    | 'Number' :number -> ['Number', number]
    
    | 'Variable' :name -> ['Variable', name]
    
    | 'Property' :name -> ['Property', name]
    
    | 'JSFunction' :jsCode -> ['JSFunction', jsCode]
    
    | 'JSExpr' :jsCode -> ['JSExpr', jsCode]
  }

}
