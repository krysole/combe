// Generated by Combe/JS Compiler

var Class = require('./class');
var Range = require('./range');

// Header ->

  var Ast = require('./ast');
  var JSParser = require('./jsparser');

// <- Header

var ParentParser = (JSParser);

var CombeJSParser = module.exports = Class.new(ParentParser, {

propertyAssignment: function () {
var name, expr;
return this._apply((function () {return this._choice((JSParser.prototype.propertyAssignment),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("describe");}),
(function () {return (name = this._apply(this.propertyName));}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return (expr = this._apply(this.assignmentExpression));}),
(function () {return ( Ast('DescribePropertyDeclaration', {name: name}, expr)
  );}));}));}));
},

memberExpression: function () {
var ctor, args, expr;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._choice(this.primaryExpression,
this.functionExpression,
this.classExpression,
this.ruleExpression,
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("new");}),
(function () {return (ctor = this._apply(this.memberExpression));}),
(function () {return (args = this._apply(this.arguments));}),
(function () {return ( Ast('New', {}, ctor).concat(args)
    );}));}));})));}),
(function () {return this._repeat((function () {return (expr = this._apply((function () {return this._apply(this.propertyAccessor, expr);})));}));}),
(function () {return ( expr
  );}));}));
},

prefixExpression: function () {
return this._apply((JSParser.prototype.unaryExpression));
},

rangeInfinity: function () {
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('*');}),
(function () {return ( Ast('RangeInfinity')
  );}));}));
},

rangeOperator: function (ast) {
var rhs;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('..');}),
(function () {return (rhs = this._apply((function () {return this._choice(this.rangeInfinity,
this.prefixExpression);})));}),
(function () {return ( Ast('InclusiveRange', {}, ast, rhs)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('...');}),
(function () {return (rhs = this._apply((function () {return this._choice(this.rangeInfinity,
this.prefixExpression);})));}),
(function () {return ( Ast('ExclusiveRange', {}, ast, rhs)
  );}));}));}));
},

unaryExpression: function () {
var expr;
return this._apply((function () {return this._concat((function () {return this._choice((function () {return this._concat((function () {return (expr = this._apply(this.rangeInfinity));}),
(function () {return (expr = this._apply((function () {return this._apply(this.rangeOperator, expr);})));}));}),
(function () {return (expr = this._apply(this.prefixExpression));}));}),
(function () {return this._repeat((function () {return (expr = this._apply((function () {return this._apply(this.rangeOperator, expr);})));}));}),
(function () {return ( expr
  );}));}));
},

statement: function () {
return this._apply((function () {return this._choice((JSParser.prototype.statement),
this.matchStatement);}));
},

expressionStatement: function () {
var expr;
return this._apply((function () {return this._concat((function () {return this._not((function () {return this._choice((function () {return this.stringTokenOperatorHandler('{');}),
(function () {return this.identifierTokenOperatorHandler("function");}),
(function () {return this.identifierTokenOperatorHandler("rule");}),
(function () {return this.identifierTokenOperatorHandler("class");}));}));}),
(function () {return (expr = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( Ast('ExpressionStatement', {}, expr)
  );}));}));
},

sourceElement: function () {
return this._apply((function () {return this._choice((JSParser.prototype.sourceElement),
this.classDeclaration,
this.ruleDeclaration);}));
},

matchStatement: function () {
var subject, ptn;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("match");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (subject = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (ptn = this._apply(this.pattern));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('MatchStatement', {}, subject, ptn)
  );}));}));
},

classDeclaration: function () {
var name, inherits, pdefs;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("class");}),
(function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return this._optional((function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (inherits = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}));}));}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (pdefs = this._apply((function () {return this._apply(this.delimited, this.propertyAssignment, (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this._optional((function () {return this.stringTokenOperatorHandler(',');}));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('ClassDeclaration', {name: name.value}, inherits).concat(pdefs)
  );}));}));
},

classExpression: function () {
var name, inherits, pdefs;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("class");}),
(function () {return this._optional((function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}));}),
(function () {return this._optional((function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (inherits = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}));}));}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (pdefs = this._apply((function () {return this._apply(this.delimited, this.propertyAssignment, (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this._optional((function () {return this.stringTokenOperatorHandler(',');}));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('ClassExpression', {name: (name ? name.value : null)}, inherits).concat(pdefs)
  );}));}));
},

ruleDeclaration: function () {
var name, args, ptn;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("rule");}),
(function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return this._optional((function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (args = this._apply((function () {return this._apply(this.delimited, (function () {return this.identifierTokenOperatorHandler("identifier");}), (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this.stringTokenOperatorHandler(')');}));}));}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (ptn = this._apply(this.pattern));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('RuleDeclaration', {name: name.value, 
         argumentNames: (args ? args.map(function (elem) {return elem.value;}) : [])
       }, ptn)
  );}));}));
},

ruleExpression: function () {
var name, args, ptn;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("rule");}),
(function () {return this._optional((function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}));}),
(function () {return this._optional((function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (args = this._apply((function () {return this._apply(this.delimited, (function () {return this.identifierTokenOperatorHandler("identifier");}), (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this.stringTokenOperatorHandler(')');}));}));}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (ptn = this._apply(this.pattern));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('RuleExpression', {name: (name ? name.value : null), 
         argumentNames: (args ? args.map(function (elem) {return elem.value;}) : [])
       }, ptn)
  );}));}));
},

pattern: function () {
return this._apply(this.choicePattern);
},

choicePattern: function () {
var ptn, ptns;
return this._apply((function () {return this._concat((function () {return this._optional((function () {return this.stringTokenOperatorHandler('|');}));}),
(function () {return (ptn = this._apply(this.returnPattern));}),
(function () {return this._choice((function () {return this._concat((function () {return (ptns = this._apply((function () {return this._repeat1((function () {return this._concat((function () {return this.stringTokenOperatorHandler('|');}),
this.returnPattern);}));})));}),
(function () {return ( Ast('ChoicePattern', {}, ptn).concat(ptns)
    );}));}),
(function () {return ( ptn
    );}));}));}));
},

returnPattern: function () {
var ptn, expr, stmts;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return (ptn = this._apply(this.concatPattern));}),
(function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('->');}),
(function () {return (expr = this._apply(this.leftHandSideExpression));}),
(function () {return ( Ast('ConcatPattern', {}, ptn, Ast('ActionExpressionPattern', {}, expr))
      );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('->');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (stmts = this._apply((function () {return this._repeat(this.statement);})));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('ConcatPattern', {}, ptn, Ast('ActionBlockPattern').concat(stmts))
      );}));}),
(function () {return ( ptn
      );}));}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('->');}),
(function () {return (expr = this._apply(this.leftHandSideExpression));}),
(function () {return ( Ast('ActionExpressionPattern', {}, expr)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('->');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (stmts = this._apply((function () {return this._repeat(this.statement);})));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('ActionBlockPattern').concat(stmts)
  );}));}));}));
},

concatPattern: function () {
var ptn, ptns;
return this._apply((function () {return this._concat((function () {return (ptn = this._apply(this.bindPattern));}),
(function () {return this._choice((function () {return this._concat((function () {return (ptns = this._apply((function () {return this._repeat1(this.bindPattern);})));}),
(function () {return ( Ast('ConcatPattern', {}, ptn).concat(ptns)
    );}));}),
(function () {return ( ptn
    );}));}));}));
},

bindPattern: function () {
var ptn, name;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return (ptn = this._apply(this.prefixOperatorPattern));}),
(function () {return this._choice((function () {return this._concat((function () {return this._not(this.whitespace);}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return ( Ast('BindPattern', {name: name.value}, ptn)
      );}));}),
(function () {return ( ptn
      );}));}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler(':');}),
(function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return ( Ast('BindPattern', {name: name.value}, Ast('AnythingPattern'))
  );}));}));}));
},

prefixOperatorPattern: function () {
var ptn;
return this._apply((function () {return this._choice(this.repeatPattern,
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('~');}),
(function () {return (ptn = this._apply(this.prefixOperatorPattern));}),
(function () {return ( Ast('NotPattern', {}, ptn)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('&');}),
(function () {return (ptn = this._apply(this.prefixOperatorPattern));}),
(function () {return ( Ast('LookaheadPattern', {}, ptn)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('#');}),
(function () {return (ptn = this._apply(this.prefixOperatorPattern));}),
(function () {return ( Ast('TokenOperatorPattern', {}, ptn)
  );}));}));}));
},

repeatPattern: function () {
var ptn;
return this._apply((function () {return this._concat((function () {return (ptn = this._apply(this.applyPattern));}),
(function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('*');}),
(function () {return ( Ast('RepeatPattern', {}, ptn)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('+');}),
(function () {return ( Ast('Repeat1Pattern', {}, ptn)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('?');}),
(function () {return this._not((function () {return this._concat((function () {return this._not(this.whitespace);}),
(function () {return this._choice((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.stringTokenOperatorHandler('{');}));}));}));}),
(function () {return ( Ast('OptionalPattern', {}, ptn)
    );}));}),
(function () {return ( ptn
    );}));}));}));
},

applyPattern: function () {
var ptn, args;
return this._apply((function () {return this._concat((function () {return (ptn = this._apply(this.primaryPattern));}),
(function () {return this._repeat((function () {return this._choice((function () {return this._concat((function () {return this._not(this.whitespace);}),
(function () {return (args = this._apply(this.arguments));}),
(function () {return (ptn = Ast('JSApplyPattern', {}, ptn).concat(args));}));}),
(function () {return this._concat((function () {return this._not(this.whitespace);}),
(function () {return (args = this._apply(this.patternArguments));}),
(function () {return (ptn = Ast('ApplyPattern', {}, ptn).concat(args));}));}));}));}),
(function () {return ( ptn
  );}));}));
},

patternArguments: function () {
var args;
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('[');}),
(function () {return (args = this._apply((function () {return this._apply(this.delimited, this.pattern, (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this.stringTokenOperatorHandler(']');}),
(function () {return ( args
  );}));}));
},

primaryPattern: function () {
var ptn;
return this._apply((function () {return this._choice(this.predicatePattern,
this.actionPattern,
this.immediatePattern,
this.literalPattern,
this.variablePattern,
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (ptn = this._apply(this.pattern));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return ( ptn
  );}));}));}));
},

predicatePattern: function () {
var expr, stmts;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('?');}),
(function () {return this._not(this.whitespace);}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (expr = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return ( Ast('PredicateExpressionPattern', {}, expr)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('?');}),
(function () {return this._not(this.whitespace);}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (stmts = this._apply((function () {return this._repeat(this.statement);})));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('PredicateBlockPattern').concat(stmts)
  );}));}));}));
},

actionPattern: function () {
var expr, stmts;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('!');}),
(function () {return this._not(this.whitespace);}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (expr = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return ( Ast('ActionExpressionPattern', {}, expr)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('!');}),
(function () {return this._not(this.whitespace);}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (stmts = this._apply((function () {return this._repeat(this.statement);})));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('ActionBlockPattern').concat(stmts)
  );}));}));}));
},

immediatePattern: function () {
var expr, stmts;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('%');}),
(function () {return this._not(this.whitespace);}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (expr = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return ( Ast('ImmediateExpressionPattern', {}, expr)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('%');}),
(function () {return (expr = this._apply(this.leftHandSideExpression));}),
(function () {return ( Ast('ImmediateExpressionPattern', {}, expr)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('%');}),
(function () {return this._not(this.whitespace);}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (stmts = this._apply((function () {return this._repeat(this.statements);})));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('ImmediateBlockPattern').concat(stmts)
  );}));}));}));
},

literalPattern: function () {
var expr;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._choice(this.valueLiteral,
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('undefined');}),
(function () {return ( Ast('ValueLiteral', {value: undefined})
    );}));}));})));}),
(function () {return ( Ast('ImmediateExpressionPattern', {}, expr)
  );}));}));
},

variablePattern: function () {
var name;
return this._apply((function () {return this._concat((function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return ( Ast('VariablePattern', {name: name.value})
  );}));}));
},

whitespace: function () {
var token;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return (token = this._apply((function () {return this._lookahead(this.anything);})));}),
(function () {return this._predicate((function () {return (!token.previousToken || token.previousToken.is('whitespace'));}));}));}),
this.eof);}));
}

});
