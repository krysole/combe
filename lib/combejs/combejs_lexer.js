// Generated by Combe/JS Compiler

var util = require('./util');
var Range = require('./range');

// Header ->

  var JSLexer = require('./jslexer');

// <- Header

var ParentParser = (JSLexer);

var CombeJSLexer = module.exports = function () {
  ParentParser.call(this);
};

util.extend((CombeJSLexer.prototype = Object.create(ParentParser.prototype)), {

extendedIdentifier: function (text) {
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this._predicate((function () {return (['class', 'match', 'rule'].include(text));}));}),
(function () {return this._apply(this.token, text, (['keyword', 'reservedWord', 'identifierName']));}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (['get', 'set', 'describe'].include(text));}));}),
(function () {return this._apply(this.token, text, (['identifier', 'identifierName']), text);}));}));}));
},

punctuation: function () {
var text;
return this._apply((function () {return this._concat((function () {return (text = this._apply((function () {return this._choice('...',
'..',
'{',
'}',
'(',
')',
'[',
']',
'.',
';',
',',
'<',
'>',
'<=',
'>=',
'===',
'!==',
'==',
'!=',
'+',
'-',
'*',
'%',
'&',
'|',
'^',
'!',
'~',
'&&',
'||',
'?',
':',
'++',
'--',
'<<',
'>>',
'>>>');})));}),
(function () {return this._apply(this.token, text, (['punctuation']));}));}));
}

});
