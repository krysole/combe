// Generated by Combe/JS Compiler

var Class = require('./class');
var Range = require('./range');

// Header ->

  var JSLexer = require('./jslexer');

// <- Header

var ParentParser = (JSLexer);

var CombeJSLexer = module.exports = Class.new(ParentParser, {

identifierName: function () {
var text;
return this._apply((function () {return this._concat((function () {return (text = this._apply((function () {return this._apply(this.matchedInput, (function () {return this._concat(this.idFirstChar,
(function () {return this._repeat(this.idChar);}));}));})));}),
(function () {return this._choice((function () {return this._concat((function () {return this._predicate((function () {return (text === 'null');}));}),
(function () {return this._apply(this.identifierNameToken, 'null', (['identifierName']), text, (null));}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (text === 'true');}));}),
(function () {return this._apply(this.identifierNameToken, 'boolean', (['true', 'identifierName']), text, (true));}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (text === 'false');}));}),
(function () {return this._apply(this.identifierNameToken, 'boolean', (['false', 'identifierName']), text, (false));}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (['class', 'match', 'rule'].include(text));}));}),
(function () {return this._apply(this.identifierNameToken, text, (['keyword', 'reservedWord', 'identifierName']), text);}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (['get', 'set', 'describe'].include(text));}));}),
(function () {return this._apply(this.identifierNameToken, text, (['identifier', 'identifierName']), text);}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (text.isKeyword(text));}));}),
(function () {return this._apply(this.identifierNameToken, text, (['keyword', 'reservedWord', 'identifierName']), text);}));}),
(function () {return this._concat((function () {return this._predicate((function () {return (text.isFutureReservedWord(text));}));}),
(function () {return this._apply(this.identifierNameToken, 'futureReservedWord', (['reservedWord', 'identifierName']), text);}));}),
(function () {return this._apply(this.identifierNameToken, 'identifier', (['identifierName']), text, text);}));}));}));
},

punctuation: function () {
var text;
return this._apply((function () {return this._concat((function () {return (text = this._apply((function () {return this._choice('...',
'..',
'->',
'{',
'}',
'(',
')',
'[',
']',
(function () {return this._concat('.',
(function () {return this._not(this.digit);}),
(function () {return ( '.' );}));}),
';',
',',
'&&',
'||',
'?',
':',
'++',
'--',
'<<',
'>>>',
'>>',
'<=',
'>=',
'<',
'>',
'===',
'!==',
'==',
'!=',
'+',
'-',
'*',
'%',
'&',
'|',
'^',
'!',
'~');})));}),
(function () {return this._apply(this.token, text, (['punctuation']));}));}));
}

});
