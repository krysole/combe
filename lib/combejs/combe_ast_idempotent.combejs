//
// Combe/JS - A Parsing Language for JavaScript
//
// Copyright 2011 Lorenz Pretterhofer
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

combe CombeASTIdempotent {

  rule translate[ast] {
    withObject[ast, recur]
  }
  
  rule recur {
    [:ruleName apply[%(this.getRule(ruleName))]:result] -> result
  }

  rule Grammar {
    :name recur:parent [recur*:rules] -> ['Grammar', name, parent, rules]
  }
  
  rule Parent { 
    | ['JSExpr' :jsCode] -> ['Parent', ['JSExpr', jsCode]]
    | ['DefaultParent'] -> ['Parent', ['DefaultParent']]
  }
  
  rule Rule {
    :name :args :vars recur:expr -> ['Rule', name, args, vars, expr]
  }
  
  rule Choice {
    recur+:exprs -> ['Choice'].concat(exprs)
  }
  
  rule Concat {
    recur+:exprs -> ['Concat'].concat(exprs)
  }
  
  rule Action {
    recur:jsExpr -> ['Action', jsExpr]
  }
  
  rule Bind {
    :name recur:expr -> ['Bind', name, expr]
  }
  
  rule Not {
    recur:expr -> ['Not', expr]
  }
  
  rule Lookahead {
    recur:expr -> ['Lookahead', expr]
  }
  
  rule Repeat {
    recur:expr -> ['Repeat', expr]
  }
  
  rule Repeat1 {
    recur:expr -> ['Repeat1', expr]
  }
  
  rule Optional {
    recur:expr -> ['Optional', expr]
  }
  
  rule TokenIdentifier {
    :name -> ['TokenIdentifier', name]
  }
  
  rule TokenString {
    :string -> ['TokenString', string]
  }
  
  rule TokenParser {
    recur:expr -> ['TokenParser', expr]
  }
  
  rule Predicate {
    recur:jsExpr -> ['Predicate', jsExpr]
  }
  
  rule Apply {
    | recur:expr [recur*:argExprs] -> ['Apply', expr, argExprs]
    | recur:expr -> ['Apply', expr]
  }
  
  rule ImmediateAction {
    recur:jsExpr -> ['ImmediateAction', jsExpr]
  }
  
  rule Destructure {
    recur:expr -> ['Destructure', expr]
  }
  
  rule Range {
    recur:leftExpr recur:rightExpr -> ['Range', leftExpr, rightExpr]
  }
  
  rule Infinity {
    -> ['Infinity']
  }
  
  rule String {
    :string -> ['String', string]
  }
  
  rule Number {
    :number -> ['Number', number]
  }
  
  rule Variable {
    :name -> ['Variable', name]
  }
  
  rule Property {
    :name -> ['Property', name]
  }
  
  rule JSFunction {
    :jsCode -> ['JSFunction', jsCode]
  }
  
  rule JSExpr {
    :jsCode -> ['JSExpr', jsCode]
  }

}
