// Generated by Combe/JS Compiler

var util = require('./util');
var Range = require('./range');

// Header ->


// <- Header

var ParentParser = (require('./base_parser'));

var JSParser = module.exports = function () {
  ParentParser.call(this);
};

util.extend((JSParser.prototype = Object.create(ParentParser.prototype)), {

script: function () {
var stmts;
return this._apply((function () {
  return this._concat((function () {
    return (stmts = this._apply((function () {
      return this._repeat(this.statement);})));}),
      this.eof,
(function () {
  return ( stmts
  );}));}));
},

primaryExpression: function () {
return this._apply((function () {return this._choice((function () {return this.identifierTokenOperatorHandler("this");}),
(function () {return this.identifierTokenOperatorHandler("identifier");}),
this.valueLiteral,
this.arrayLiteral,
this.objectLiteral,
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
this.expression,
(function () {return this.stringTokenOperatorHandler(')');}));}));}));
},

valueLiteral: function () {
return this._apply((function () {return this._choice((function () {return this.identifierTokenOperatorHandler("null");}),
(function () {return this.identifierTokenOperatorHandler("boolean");}),
(function () {return this.identifierTokenOperatorHandler("number");}),
(function () {return this.identifierTokenOperatorHandler("string");}),
(function () {return this.identifierTokenOperatorHandler("regex");}));}));
},

arrayLiteral: function () {
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('[');}),
(function () {return this._apply(this.delimited, (function () {return this._optional(this.assignmentExpression);}), (function () {return this.stringTokenOperatorHandler(',');}));}),
(function () {return this.stringTokenOperatorHandler(']');}));}));
},

objectLiteral: function () {
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('{');}),
(function () {return this._apply(this.delimited, this.propertyAssignment, (function () {return this.stringTokenOperatorHandler(',');}));}),
(function () {return this.stringTokenOperatorHandler('}');}));}));
},

propertyAssignment: function () {
return this._apply((function () {return this._choice((function () {return this._concat(this.propertyName,
(function () {return this.stringTokenOperatorHandler(':');}),
this.assignmentExpression);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("get");}),
this.propertyName,
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
this.functionBody,
(function () {return this.stringTokenOperatorHandler('}');}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("set");}),
this.propertyName,
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.identifierTokenOperatorHandler("identifier");}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
this.functionBody,
(function () {return this.stringTokenOperatorHandler('}');}));}));}));
},

propertyName: function () {
return this._apply((function () {return this._choice((function () {return this.identifierTokenOperatorHandler("identifierName");}),
(function () {return this.identifierTokenOperatorHandler("string");}),
(function () {return this.identifierTokenOperatorHandler("number");}));}));
},

memberExpression: function () {
return this._apply((function () {return this._concat((function () {return this._choice(this.primaryExpression,
this.functionExpression,
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("new");}),
this.memberExpression,
this.arguments);}));}),
(function () {return this._repeat(this.propertyAccessor);}));}));
},

newExpression: function () {
return this._apply((function () {return this._choice(this.memberExpression,
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("new");}),
this.newExpression);}));}));
},

propertyAccessor: function () {
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('[');}),
this.expression,
(function () {return this.stringTokenOperatorHandler(']');}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('.');}),
(function () {return this.identifierTokenOperatorHandler("identifierName");}));}));}));
},

callExpression: function () {
return this._apply((function () {return this._concat(this.memberExpression,
this.arguments,
(function () {return this._repeat((function () {return this._choice(this.arguments,
this.propertyAccessor);}));}));}));
},

arguments: function () {
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this._apply(this.delimited, this.assignmentExpression, (function () {return this.stringTokenOperatorHandler(',');}));}),
(function () {return this.stringTokenOperatorHandler(')');}));}));
},

leftHandSideExpression: function () {
return this._apply((function () {return this._choice(this.newExpression,
this.callExpression);}));
},

postfixExpression: function () {
return this._apply((function () {return this._concat(this.leftHandSideExpression,
(function () {return this._choice((function () {return this._concat((function () {return this._not(this.newline);}),
(function () {return this.stringTokenOperatorHandler('++');}));}),
(function () {return this._concat((function () {return this._not(this.newline);}),
(function () {return this.stringTokenOperatorHandler('--');}));}),
this.nothing);}));}));
},

unaryExpression: function () {
return this._apply((function () {return this._choice(this.postfixExpression,
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("delete");}),
this.unaryExpression);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("void");}),
this.unaryExpression);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("typeof");}),
this.unaryExpression);}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('++');}),
this.unaryExpression);}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('--');}),
this.unaryExpression);}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('+');}),
this.unaryExpression);}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('-');}),
this.unaryExpression);}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('~');}),
this.unaryExpression);}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('!');}),
this.unaryExpression);}));}));
},

multiplicativeExpression: function () {
return this._apply((function () {return this._concat(this.unaryExpression,
(function () {return this._repeat((function () {return this._concat((function () {return this._choice((function () {return this.stringTokenOperatorHandler('*');}),
(function () {return this.stringTokenOperatorHandler('/');}),
(function () {return this.stringTokenOperatorHandler('%');}));}),
this.unaryExpression);}));}));}));
},

additiveExpression: function () {
return this._apply((function () {return this._concat(this.multiplicativeExpression,
(function () {return this._repeat((function () {return this._concat((function () {return this._choice((function () {return this.stringTokenOperatorHandler('+');}),
(function () {return this.stringTokenOperatorHandler('-');}));}),
this.multiplicativeExpression);}));}));}));
},

shiftExpression: function () {
return this._apply((function () {return this._concat(this.additiveExpression,
(function () {return this._repeat((function () {return this._concat((function () {return this._choice((function () {return this.stringTokenOperatorHandler('<<');}),
(function () {return this.stringTokenOperatorHandler('>>');}),
(function () {return this.stringTokenOperatorHandler('>>>');}));}),
this.additiveExpression);}));}));}));
},

inToken: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this._predicate((function () {return (allowIn);}));}),
(function () {return this.identifierTokenOperatorHandler("in");}));}));
},

relationalExpression: function (allowIn) {
return this._apply((function () {return this._concat(this.shiftExpression,
(function () {return this._repeat((function () {return this._concat((function () {return this._choice((function () {return this.stringTokenOperatorHandler('<');}),
(function () {return this.stringTokenOperatorHandler('>');}),
(function () {return this.stringTokenOperatorHandler('<=');}),
(function () {return this.stringTokenOperatorHandler('>=');}),
(function () {return this.identifierTokenOperatorHandler("instanceof");}),
(function () {return this._apply(this.inToken, allowIn);}));}),
this.shiftExpression);}));}));}));
},

equalityExpression: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this._apply(this.relationalExpression, allowIn);}),
(function () {return this._repeat((function () {return this._concat((function () {return this._choice((function () {return this.stringTokenOperatorHandler('==');}),
(function () {return this.stringTokenOperatorHandler('!=');}),
(function () {return this.stringTokenOperatorHandler('===');}),
(function () {return this.stringTokenOperatorHandler('!==');}));}),
(function () {return this._apply(this.relationalExpression, allowIn);}));}));}));}));
},

bitwiseAndExpression: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this._apply(this.equalityExpression, allowIn);}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('&');}),
(function () {return this._apply(this.equalityExpression, allowIn);}));}));}));}));
},

bitwiseXorExpression: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this._apply(this.bitwiseAndExpression, allowIn);}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('^');}),
(function () {return this._apply(this.bitwiseAndExpression, allowIn);}));}));}));}));
},

bitwiseOrExpression: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this._apply(this.bitwiseXorExpression, allowIn);}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('|');}),
(function () {return this._apply(this.bitwiseXorExpression, allowIn);}));}));}));}));
},

logicalAndExpression: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this._apply(this.bitwiseOrExpression, allowIn);}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('&&');}),
(function () {return this._apply(this.bitwiseOrExpression, allowIn);}));}));}));}));
},

logicalOrExpression: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this._apply(this.logicalAndExpression, allowIn);}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('||');}),
(function () {return this._apply(this.logicalAndExpression, allowIn);}));}));}));}));
},

conditionalExpression: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this._apply(this.logicalOrExpression, allowIn);}),
(function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('?');}),
(function () {return this._apply(this.assignmentExpression, allowIn);}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return this._apply(this.assignmentExpression, allowIn);}));}),
this.nothing);}));}));
},

assignmentExpression: function (allowIn) {
return this._apply((function () {return this._choice(this.conditionalExpression,
(function () {return this._concat(this.leftHandSideExpression,
(function () {return this.identifierTokenOperatorHandler("assignmentOperator");}),
(function () {return this._apply(this.assignmentExpression, allowIn);}));}));}));
},

expression: function (allowIn) {
return this._apply((function () {return this._apply(this.delimited, (function () {return this._apply(this.assignmentExpression, allowIn);}), (function () {return this.stringTokenOperatorHandler(',');}));}));
},

statement: function () {
return this._apply((function () {return this._choice(this.block,
this.variableStatement,
this.emptyStatement,
this.expressionStatement,
this.ifStatement,
this.iterationStatement,
this.continueStatement,
this.breakStatement,
this.returnStatement,
this.withStatement,
this.labelledStatement,
this.switchStatement,
this.throwStatement,
this.tryStatement,
this.debuggerStatement);}));
},

block: function () {
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('{');}),
(function () {return this._repeat(this.statement);}),
(function () {return this.stringTokenOperatorHandler('}');}));}));
},

variableStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("var");}),
this.variableDeclarationList,
(function () {return this.stringTokenOperatorHandler(';');}));}));
},

variableDeclarationList: function (allowIn) {
return this._apply((function () {return this._apply(this.delimited, (function () {return this._apply(this.variableDeclaration, allowIn);}), (function () {return this.stringTokenOperatorHandler(',');}));}));
},

variableDeclaration: function (allowIn) {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("identifier");}),
(function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('=');}),
(function () {return this._apply(this.assignmentExpression, allowIn);}));}),
this.nothing);}));}));
},

emptyStatement: function () {
return this._apply((function () {return this.stringTokenOperatorHandler(';');}));
},

expressionStatement: function () {
return this._apply((function () {return this._concat((function () {return this._not((function () {return this._choice((function () {return this.stringTokenOperatorHandler('{');}),
(function () {return this.identifierTokenOperatorHandler("function");}));}));}),
this.expression,
(function () {return this.stringTokenOperatorHandler(';');}));}));
},

ifStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("if");}),
(function () {return this.stringTokenOperatorHandler('(');}),
this.expression,
(function () {return this.stringTokenOperatorHandler(')');}),
this.statement,
(function () {return this._choice((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("else");}),
this.statement);}),
this.nothing);}));}));
},

iterationStatement: function () {
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("do");}),
this.statement,
(function () {return this.identifierTokenOperatorHandler("while");}),
(function () {return this.stringTokenOperatorHandler('(');}),
this.expression,
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler(';');}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("while");}),
(function () {return this.stringTokenOperatorHandler('(');}),
this.expression,
(function () {return this.stringTokenOperatorHandler(')');}),
this.statement);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("for");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this._optional((function () {return this._apply(this.expression, this.false);}));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return this._optional(this.expression);}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return this._optional(this.expression);}),
(function () {return this.stringTokenOperatorHandler(')');}),
this.statement);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("for");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.identifierTokenOperatorHandler("var");}),
(function () {return this._apply(this.variableDeclarationList, this.false);}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return this._optional(this.expression);}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return this._optional(this.expression);}),
(function () {return this.stringTokenOperatorHandler(')');}),
this.statement);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("for");}),
(function () {return this.stringTokenOperatorHandler('(');}),
this.leftHandSideExpression,
(function () {return this.identifierTokenOperatorHandler("in");}),
this.expression,
(function () {return this.stringTokenOperatorHandler(')');}),
this.statement);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("for");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.identifierTokenOperatorHandler("var");}),
(function () {return this._apply(this.variableDeclaration, this.false);}),
(function () {return this.identifierTokenOperatorHandler("in");}),
this.expression,
(function () {return this.stringTokenOperatorHandler(')');}),
this.statement);}));}));
},

continueStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("continue");}),
(function () {return this._not(this.newline);}),
(function () {return this._optional((function () {return this.identifierTokenOperatorHandler("identifier");}));}),
(function () {return this.stringTokenOperatorHandler(';');}));}));
},

breakStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("break");}),
(function () {return this._not(this.newline);}),
(function () {return this._optional((function () {return this.identifierTokenOperatorHandler("identifier");}));}),
(function () {return this.stringTokenOperatorHandler(';');}));}));
},

returnStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("return");}),
(function () {return this._not(this.newline);}),
(function () {return this._optional(this.expression);}),
(function () {return this.stringTokenOperatorHandler(';');}));}));
},

withStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("with");}),
(function () {return this.stringTokenOperatorHandler('(');}),
this.expression,
(function () {return this.stringTokenOperatorHandler(')');}),
this.statement);}));
},

switchStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("switch");}),
(function () {return this.stringTokenOperatorHandler('(');}),
this.expression,
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return this._repeat(this.caseClause);}),
this.defaultClause,
(function () {return this._repeat(this.caseClause);}),
(function () {return this.stringTokenOperatorHandler('}');}));}));
},

caseClause: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("case");}),
this.expression,
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return this._repeat(this.statement);}));}));
},

defaultClause: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("default");}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return this._repeat(this.statement);}));}));
},

labelledStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("identifier");}),
(function () {return this.stringTokenOperatorHandler(':');}),
this.statement);}));
},

throwStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("throw");}),
(function () {return this._not(this.newline);}),
this.expression,
(function () {return this.stringTokenOperatorHandler(';');}));}));
},

tryStatement: function () {
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("try");}),
this.block,
this["catch"]);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("try");}),
this.block,
this["finally"]);}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("try");}),
this.block,
this["catch"],
this["finally"]);}));}));
},

"catch": function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("catch");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.identifierTokenOperatorHandler("identifier");}),
(function () {return this.stringTokenOperatorHandler(')');}),
this.block);}));
},

"finally": function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("finally");}),
this.block);}));
},

debuggerStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("debugger");}),
(function () {return this.stringTokenOperatorHandler(';');}));}));
},

functionDeclaration: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("function");}),
(function () {return this.identifierTokenOperatorHandler("identifier");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this._apply(this.delimited, (function () {return this.identifierTokenOperatorHandler("identifier");}), (function () {return this.stringTokenOperatorHandler(',');}));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
this.functionBody,
(function () {return this.stringTokenOperatorHandler('}');}));}));
},

functionExpression: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("function");}),
(function () {return this._optional((function () {return this.identifierTokenOperatorHandler("identifier");}));}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this._apply(this.delimited, (function () {return this.identifierTokenOperatorHandler("identifier");}), (function () {return this.stringTokenOperatorHandler(',');}));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
this.functionBody,
(function () {return this.stringTokenOperatorHandler('}');}));}));
},

functionBody: function () {
return this._apply((function () {return this._repeat(this.sourceElement);}));
},

program: function () {
return this._apply((function () {return this._repeat(this.sourceElement);}));
},

sourceElement: function () {
return this._apply((function () {return this._choice(this.statement,
this.functionDeclaration);}));
},

newline: function () {
var token;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return (token = this._apply((function () {return this._lookahead(this.anything);})));}),
(function () {return this._predicate((function () {return (token.preceededByNewline);}));}));}),
this.eof);}));
},

defaultTokenOperatorHandler: function (what) {
return this._apply((function () {return this._apply(this.error, "Cannot use default tokenOperatorHandler");}));
},

stringTokenOperatorHandler: function (string) {
return this._apply((function () {return this._apply(this.getNextToken, string);}));
},

identifierTokenOperatorHandler: function (name) {
return this._apply((function () {return this._apply(this.getNextToken, name);}));
},

getNextToken: function (tag) {
return this._apply((function () {
      if (this.input.current.eof()) {
        this._fail();
      } else if (tag === '/' || tag === '/=') {
        return this.input.current.readReplacing(['unknown', 'regex'], 'division', tag);
      } else if (tag === 'regex') {
        return this.input.current.readReplacing(['unknown', 'division'], 'regex', tag);
      } else {
        return this._anything(function (token) {
          return token.is(tag);
        });
      }
    }));
}

});
