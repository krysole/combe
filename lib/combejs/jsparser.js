// Generated by Combe/JS Compiler

var util = require('./util');
var Range = require('./range');

// Header ->

  var Ast = require('./ast');

// <- Header

var ParentParser = (require('./base_parser'));

var JSParser = module.exports = function () {
  ParentParser.call(this);
};

util.extend((JSParser.prototype = Object.create(ParentParser.prototype)), {

primaryExpression: function () {
var token, e;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("this");}),
(function () {return ( Ast('This')
    );}));}),
(function () {return this._concat((function () {return (token = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return ( Ast('VariableLookup', {name: token.value})
    );}));}),
(function () {return this._concat((function () {return (token = this._apply(this.valueLiteral));}),
(function () {return ( Ast('ValueLiteral', {value: token.value})
    );}));}),
this.arrayLiteral,
this.objectLiteral,
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (e = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return ( e
  );}));}));}));
},

valueLiteral: function () {
return this._apply((function () {return this._choice((function () {return this.identifierTokenOperatorHandler("null");}),
(function () {return this.identifierTokenOperatorHandler("boolean");}),
(function () {return this.identifierTokenOperatorHandler("number");}),
(function () {return this.identifierTokenOperatorHandler("string");}),
(function () {return this.identifierTokenOperatorHandler("regex");}));}));
},

arrayLiteral: function () {
var exprs;
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('[');}),
(function () {return (exprs = this._apply((function () {return this._apply(this.delimited, this.arrayElement, (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this.stringTokenOperatorHandler(']');}),
(function () {return ( Ast('ArrayLiteral', {}).concat(exprs)
  );}));}));
},

arrayElement: function () {
return this._apply((function () {return this._choice(this.assignmentExpression,
(function () {return ( Ast('Elision')
  );}));}));
},

objectLiteral: function () {
var pdefs;
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (pdefs = this._apply((function () {return this._apply(this.delimited, this.propertyAssignment, (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this._optional((function () {return this.stringTokenOperatorHandler(',');}));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('ObjectLiteral', {}).concat(pdefs)
  );}));}));
},

propertyAssignment: function () {
var name, expr, body, arg;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return (name = this._apply(this.propertyName));}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return (expr = this._apply(this.assignmentExpression));}),
(function () {return ( Ast('ValuePropertyDeclaration', {name: name}, expr)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("get");}),
(function () {return (name = this._apply(this.propertyName));}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (body = this._apply(this.functionBody));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('GetPropertyDeclaration', {name: name}).concat(body)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("set");}),
(function () {return (name = this._apply(this.propertyName));}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (arg = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (body = this._apply(this.functionBody));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('SetPropertyDeclaration', {name: name, argumentName: arg.value}).concat(body)
  );}));}));}));
},

propertyName: function () {
var token;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return (token = this._apply((function () {return this.identifierTokenOperatorHandler("identifierName");})));}),
(function () {return ( token.identifierName
    );}));}),
(function () {return this._concat((function () {return (token = this._apply((function () {return this.identifierTokenOperatorHandler("string");})));}),
(function () {return ( token.value
    );}));}),
(function () {return this._concat((function () {return (token = this._apply((function () {return this.identifierTokenOperatorHandler("number");})));}),
(function () {return ( token.value
  );}));}));}));
},

memberExpression: function () {
var ctor, args, expr;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._choice(this.primaryExpression,
this.functionExpression,
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("new");}),
(function () {return (ctor = this._apply(this.memberExpression));}),
(function () {return (args = this._apply(this.arguments));}),
(function () {return ( Ast('New', {}, ctor).concat(args)
    );}));}));})));}),
(function () {return this._repeat((function () {return (expr = this._apply((function () {return this._apply(this.propertyAccessor, expr);})));}));}),
(function () {return ( expr
  );}));}));
},

newExpression: function () {
var ctor;
return this._apply((function () {return this._choice(this.memberExpression,
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("new");}),
(function () {return (ctor = this._apply(this.newExpression));}),
(function () {return ( Ast('New', {}, ctor)
  );}));}));}));
},

propertyAccessor: function (subject) {
var expr, t;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('[');}),
(function () {return (expr = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(']');}),
(function () {return ( Ast('PropertyLookup', {}, subject, expr)
    );}));}),
(function () {return this._concat((function () {return this.stringTokenOperatorHandler('.');}),
(function () {return (t = this._apply((function () {return this.identifierTokenOperatorHandler("identifierName");})));}),
(function () {return ( Ast('PropertyLookup', {}, subject, Ast('ValueLiteral', {value: t.value}))
  );}));}));}));
},

callExpression: function () {
var expr, args;
return this._apply((function () {return this._concat((function () {return (expr = this._apply(this.memberExpression));}),
(function () {return (args = this._apply(this.arguments));}),
(function () {return (expr = Ast('Call', {}, expr).concat(args));}),
(function () {return this._repeat((function () {return this._choice((function () {return this._concat((function () {return (args = this._apply(this.arguments));}),
(function () {return (expr = Ast('Call', {}, expr).concat(args));}));}),
(function () {return (expr = this._apply((function () {return this._apply(this.propertyAccessor, expr);})));}));}));}),
(function () {return ( expr
  );}));}));
},

arguments: function () {
var exprs;
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (exprs = this._apply((function () {return this._apply(this.delimited, this.assignmentExpression, (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return ( exprs
  );}));}));
},

leftHandSideExpression: function () {
return this._apply((function () {return this._choice(this.callExpression,
this.newExpression);}));
},

postfixExpression: function () {
var expr;
return this._apply((function () {return this._concat((function () {return (expr = this._apply(this.leftHandSideExpression));}),
(function () {return this._choice((function () {return this._concat((function () {return this._not(this.newline);}),
(function () {return this.stringTokenOperatorHandler('++');}),
(function () {return ( Ast('PostfixIncrement', {sign: +1}, expr)
    );}));}),
(function () {return this._concat((function () {return this._not(this.newline);}),
(function () {return this.stringTokenOperatorHandler('--');}),
(function () {return ( Ast('PostfixIncrement', {sign: -1}, expr)
    );}));}),
(function () {return this._concat(this.nothing,
(function () {return ( expr
    );}));}));}));}));
},

unaryExpression: function () {
var expr, op;
return this._apply((function () {return this._choice(this.postfixExpression,
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("delete");}),
(function () {return (expr = this._apply(this.unaryExpression));}),
(function () {return ( Ast('Delete', {}, expr)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("void");}),
(function () {return (expr = this._apply(this.unaryExpression));}),
(function () {return ( Ast('Void', {}, expr)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("typeof");}),
(function () {return (expr = this._apply(this.unaryExpression));}),
(function () {return ( Ast('TypeOf', {}, expr)
    );}));}),
(function () {return this._concat((function () {return (op = this._apply((function () {return this._choice((function () {return this.stringTokenOperatorHandler('++');}),
(function () {return this.stringTokenOperatorHandler('--');}),
(function () {return this.stringTokenOperatorHandler('+');}),
(function () {return this.stringTokenOperatorHandler('-');}),
(function () {return this.stringTokenOperatorHandler('~');}),
(function () {return this.stringTokenOperatorHandler('!');}));})));}),
(function () {return (expr = this._apply(this.unaryExpression));}),
(function () {return ( Ast('UnaryOperator', {name: op.type}, expr)
  );}));}));}));
},

multiplicativeExpression: function () {
var expr, op, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply(this.unaryExpression));}),
(function () {return this._repeat((function () {return this._concat((function () {return (op = this._apply((function () {return this._choice((function () {return this.stringTokenOperatorHandler('*');}),
(function () {return this.stringTokenOperatorHandler('/');}),
(function () {return this.stringTokenOperatorHandler('%');}));})));}),
(function () {return (rhs = this._apply(this.unaryExpression));}),
(function () {return (expr = Ast('Operator', {name: op.type}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

additiveExpression: function () {
var expr, op, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply(this.multiplicativeExpression));}),
(function () {return this._repeat((function () {return this._concat((function () {return (op = this._apply((function () {return this._choice((function () {return this.stringTokenOperatorHandler('+');}),
(function () {return this.stringTokenOperatorHandler('-');}));})));}),
(function () {return (rhs = this._apply(this.multiplicativeExpression));}),
(function () {return (expr = Ast('Operator', {name: op.type}, expr, rightExpr));}));}));}),
(function () {return ( expr
  );}));}));
},

shiftExpression: function () {
var expr, op, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply(this.additiveExpression));}),
(function () {return this._repeat((function () {return this._concat((function () {return (op = this._apply((function () {return this._choice((function () {return this.stringTokenOperatorHandler('<<');}),
(function () {return this.stringTokenOperatorHandler('>>');}),
(function () {return this.stringTokenOperatorHandler('>>>');}));})));}),
(function () {return (rhs = this._apply(this.additiveExpression));}),
(function () {return (expr = Ast('Operator', {name: op.type}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

inToken: function (noIn) {
return this._apply((function () {return this._concat((function () {return this._predicate((function () {return (!noIn);}));}),
(function () {return this.identifierTokenOperatorHandler("in");}));}));
},

relationalExpression: function (noIn) {
var expr, op, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply(this.shiftExpression));}),
(function () {return this._repeat((function () {return this._concat((function () {return (op = this._apply((function () {return this._choice((function () {return this.stringTokenOperatorHandler('<');}),
(function () {return this.stringTokenOperatorHandler('>');}),
(function () {return this.stringTokenOperatorHandler('<=');}),
(function () {return this.stringTokenOperatorHandler('>=');}),
(function () {return this.identifierTokenOperatorHandler("instanceof");}),
(function () {return this._apply(this.inToken, noIn);}));})));}),
(function () {return (rhs = this._apply(this.shiftExpression));}),
(function () {return (expr = Ast('Operator', {name: op.type}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

equalityExpression: function (noIn) {
var expr, op, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._apply(this.relationalExpression, noIn);})));}),
(function () {return this._repeat((function () {return this._concat((function () {return (op = this._apply((function () {return this._choice((function () {return this.stringTokenOperatorHandler('==');}),
(function () {return this.stringTokenOperatorHandler('!=');}),
(function () {return this.stringTokenOperatorHandler('===');}),
(function () {return this.stringTokenOperatorHandler('!==');}));})));}),
(function () {return (rhs = this._apply((function () {return this._apply(this.relationalExpression, noIn);})));}),
(function () {return (expr = Ast('Operator', {name: op.type}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

bitwiseAndExpression: function (noIn) {
var expr, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._apply(this.equalityExpression, noIn);})));}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('&');}),
(function () {return (rhs = this._apply((function () {return this._apply(this.equalityExpression, noIn);})));}),
(function () {return (expr = Ast('Operator', {name: '&'}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

bitwiseXorExpression: function (noIn) {
var expr, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._apply(this.bitwiseAndExpression, noIn);})));}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('^');}),
(function () {return (rhs = this._apply((function () {return this._apply(this.bitwiseAndExpression, noIn);})));}),
(function () {return (expr = Ast('Operator', {name: '^'}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

bitwiseOrExpression: function (noIn) {
var expr, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._apply(this.bitwiseXorExpression, noIn);})));}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('|');}),
(function () {return (rhs = this._apply((function () {return this._apply(this.bitwiseXorExpression, noIn);})));}),
(function () {return (expr = Ast('Operator', {name: '|'}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

logicalAndExpression: function (noIn) {
var expr, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._apply(this.bitwiseOrExpression, noIn);})));}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('&&');}),
(function () {return (rhs = this._apply((function () {return this._apply(this.bitwiseOrExpression, noIn);})));}),
(function () {return (expr = Ast('Operator', {name: '&&'}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

logicalOrExpression: function (noIn) {
var expr, rhs;
return this._apply((function () {return this._concat((function () {return (expr = this._apply((function () {return this._apply(this.logicalAndExpression, noIn);})));}),
(function () {return this._repeat((function () {return this._concat((function () {return this.stringTokenOperatorHandler('||');}),
(function () {return (rhs = this._apply((function () {return this._apply(this.logicalAndExpression, noIn);})));}),
(function () {return (expr = Ast('Operator', {name: '||'}, expr, rhs));}));}));}),
(function () {return ( expr
  );}));}));
},

conditionalExpression: function (noIn) {
var cond, trueExpr, falseExpr;
return this._apply((function () {return this._concat((function () {return (cond = this._apply((function () {return this._apply(this.logicalOrExpression, noIn);})));}),
(function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('?');}),
(function () {return (trueExpr = this._apply((function () {return this._apply(this.assignmentExpression, noIn);})));}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return (falseExpr = this._apply((function () {return this._apply(this.assignmentExpression, noIn);})));}),
(function () {return ( Ast('ConditionalExpression', {}, cond, trueExpr, falseExpr)
    );}));}),
(function () {return this._concat(this.nothing,
(function () {return ( cond
    );}));}));}));}));
},

assignmentExpression: function (noIn) {
var lhs, op, rhs;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return (lhs = this._apply(this.leftHandSideExpression));}),
(function () {return (op = this._apply((function () {return this.identifierTokenOperatorHandler("assignmentOperator");})));}),
(function () {return (rhs = this._apply((function () {return this._apply(this.assignmentExpression, noIn);})));}),
(function () {
        if (op.type === '=') {
          return Ast('Assignment', {}, lhs, rhs);
        } else {
          return Ast('OperatorAssignment', {operator: op.type.slice(0, -1)}, lhs, rhs);
        }
      }));}),
this.conditionalExpression);}));
},

expression: function (noIn) {
var exprs;
return this._apply((function () {return this._concat((function () {return (exprs = this._apply((function () {return this._apply(this.delimited1, (function () {return this._apply(this.assignmentExpression, noIn);}), (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this._choice((function () {return this._concat((function () {return this._predicate((function () {return (exprs.length === 1);}));}),
(function () {return ( exprs[0]
    );}));}),
(function () {return ( Ast('ExpressionSequence', {}).concat(exprs)
    );}));}));}));
},

statement: function () {
return this._apply((function () {return this._choice(this.block,
this.variableStatement,
this.emptyStatement,
this.expressionStatement,
this.ifStatement,
this.iterationStatement,
this.continueStatement,
this.breakStatement,
this.returnStatement,
this.withStatement,
this.labelledStatement,
this.switchStatement,
this.throwStatement,
this.tryStatement,
this.debuggerStatement);}));
},

block: function () {
var stmts;
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (stmts = this._apply((function () {return this._repeat(this.statement);})));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('Block', {}).concat(stmts)
  );}));}));
},

variableStatement: function () {
var lst;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("var");}),
(function () {return (lst = this._apply(this.variableDeclarationList));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( lst
  );}));}));
},

variableDeclarationList: function (noIn) {
var lst;
return this._apply((function () {return this._concat((function () {return (lst = this._apply((function () {return this._apply(this.delimited1, (function () {return this._apply(this.variableDeclaration, noIn);}), (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return ( Ast('VariableDeclarationList').concat(lst)
  );}));}));
},

variableDeclaration: function (noIn) {
var name, expr;
return this._apply((function () {return this._concat((function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return this._choice((function () {return this._concat((function () {return this.stringTokenOperatorHandler('=');}),
(function () {return (expr = this._apply((function () {return this._apply(this.assignmentExpression, noIn);})));}),
(function () {return ( Ast('VariableDeclaration', {name: name.value}, expr)
    );}));}),
(function () {return this._concat(this.nothing,
(function () {return ( Ast('VariableDeclaration', {name: name.value})
    );}));}));}));}));
},

emptyStatement: function () {
return this._apply((function () {return this._concat((function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( Ast('EmptyStatement')
  );}));}));
},

expressionStatement: function () {
var expr;
return this._apply((function () {return this._concat((function () {return this._not((function () {return this._choice((function () {return this.stringTokenOperatorHandler('{');}),
(function () {return this.identifierTokenOperatorHandler("function");}));}));}),
(function () {return (expr = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( Ast('ExpressionStatement', {}, expr)
  );}));}));
},

ifStatement: function () {
var cond, trueBranch, falseBranch;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("if");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (cond = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return (trueBranch = this._apply(this.statement));}),
(function () {return this._choice((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("else");}),
(function () {return (falseBranch = this._apply(this.statement));}),
(function () {return ( Ast('If', {}, cond, trueBranch, falseBranch)
    );}));}),
(function () {return this._concat(this.nothing,
(function () {return ( Ast('If', {}, cond, trueBranch)
    );}));}));}));}));
},

iterationStatement: function () {
var stmt, cond, initExpr, condExpr, incExpr, lvalue, subject, vardecl;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("do");}),
(function () {return (stmt = this._apply(this.statement));}),
(function () {return this.identifierTokenOperatorHandler("while");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (cond = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( Ast('DoWhile', {}, cond, stmt)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("while");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (cond = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return (stmt = this._apply(this.statement));}),
(function () {return ( Ast('While', {}, cond, stmt)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("for");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (initExpr = this._apply((function () {return this._optional((function () {return this._apply(this.expression, this.true);}));})));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return (condExpr = this._apply((function () {return this._optional(this.expression);})));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return (incExpr = this._apply((function () {return this._optional(this.expression);})));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return (stmt = this._apply(this.statement));}),
(function () {return ( Ast('For', {}, initExpr, condExpr, incExpr, stmt)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("for");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.identifierTokenOperatorHandler("var");}),
(function () {return (initExpr = this._apply((function () {return this._apply(this.variableDeclarationList, this.true);})));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return (condExpr = this._apply((function () {return this._optional(this.expression);})));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return (incExpr = this._apply((function () {return this._optional(this.expression);})));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return (stmt = this._apply(this.statement));}),
(function () {return ( Ast('For', {}, initExpr, condExpr, incExpr, stmt)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("for");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (lvalue = this._apply(this.leftHandSideExpression));}),
(function () {return this.identifierTokenOperatorHandler("in");}),
(function () {return (subject = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return (stmt = this._apply(this.statement));}),
(function () {return ( Ast('ForIn', {}, lvalue, subject, stmt)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("for");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return this.identifierTokenOperatorHandler("var");}),
(function () {return (vardecl = this._apply((function () {return this._apply(this.variableDeclaration, this.true);})));}),
(function () {return this.identifierTokenOperatorHandler("in");}),
(function () {return (subject = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return (stmt = this._apply(this.statement));}),
(function () {return ( Ast('ForIn', {declare: [vardecl.name]}, vardecl.at(0), subject, stmt)
  );}));}));}));
},

continueStatement: function () {
var name;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("continue");}),
(function () {return this._not(this.newline);}),
(function () {return (name = this._apply((function () {return this._optional((function () {return this.identifierTokenOperatorHandler("identifier");}));})));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( Ast('Continue', {label: (name ? name.value : null)})
  );}));}));
},

breakStatement: function () {
var name;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("break");}),
(function () {return this._not(this.newline);}),
(function () {return (name = this._apply((function () {return this._optional((function () {return this.identifierTokenOperatorHandler("identifier");}));})));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( Ast('Break', {label: (name ? name.value : null)})
  );}));}));
},

returnStatement: function () {
var expr;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("return");}),
(function () {return this._not(this.newline);}),
(function () {return (expr = this._apply((function () {return this._optional(this.expression);})));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {
      var ast = Ast('Return');
      if (expr) ast.push(expr);
      return ast;
    }));}));
},

withStatement: function () {
var subject, stmt;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("with");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (subject = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return (stmt = this._apply(this.statement));}),
(function () {return ( Ast('With', {}, subject, stmt)
  );}));}));
},

switchStatement: function () {
var subject, ast;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("switch");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (subject = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (ast = this._apply((function () {return (Ast('Switch'));})));}),
(function () {return this._repeat((function () {return this._apply(this.caseClause, ast);}));}),
(function () {return this._optional((function () {return this._concat((function () {return this._apply(this.defaultClause, ast);}),
(function () {return this._repeat((function () {return this._apply(this.caseClause, ast);}));}));}));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( ast
  );}));}));
},

caseClause: function (ast) {
var cmp, stmts;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("case");}),
(function () {return (cmp = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return (stmts = this._apply((function () {return this._repeat(this.statement);})));}),
(function () {return (ast.push(Ast('CaseClause', {}, cmp).concat(stmts)));}));}));
},

defaultClause: function (ast) {
var stmts;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("default");}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return (stmts = this._apply((function () {return this._repeat(this.statement);})));}),
(function () {return (ast.push(Ast('DefaultClause').concat(stmts)));}));}));
},

labelledStatement: function () {
var name, stmt;
return this._apply((function () {return this._concat((function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return this.stringTokenOperatorHandler(':');}),
(function () {return (stmt = this._apply(this.statement));}),
(function () {return ( Ast('Label', {name: name.value}, stmt)
  );}));}));
},

throwStatement: function () {
var expr;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("throw");}),
(function () {return this._not(this.newline);}),
(function () {return (expr = this._apply(this.expression));}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( Ast('Throw', {}, expr)
  );}));}));
},

tryStatement: function () {
var blk, c, f;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("try");}),
(function () {return (blk = this._apply(this.block));}),
(function () {return (c = this._apply(this["catch"]));}),
(function () {return ( Ast('Try', {}, blk, c)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("try");}),
(function () {return (blk = this._apply(this.block));}),
(function () {return (f = this._apply(this["finally"]));}),
(function () {return ( Ast('Try', {}, blk, null, f)
    );}));}),
(function () {return this._concat((function () {return this.identifierTokenOperatorHandler("try");}),
(function () {return (blk = this._apply(this.block));}),
(function () {return (c = this._apply(this["catch"]));}),
(function () {return (f = this._apply(this["finally"]));}),
(function () {return ( Ast('Try', {}, blk, c, f)
  );}));}));}));
},

"catch": function () {
var name, blk;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("catch");}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return (blk = this._apply(this.block));}),
(function () {return ( Ast('Catch', {name: name.value}, blk)
  );}));}));
},

"finally": function () {
var blk;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("finally");}),
(function () {return (blk = this._apply(this.block));}),
(function () {return ( blk
  );}));}));
},

debuggerStatement: function () {
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("debugger");}),
(function () {return this.stringTokenOperatorHandler(';');}),
(function () {return ( Ast('Debugger')
  );}));}));
},

functionDeclaration: function () {
var name, args, stmts;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("function");}),
(function () {return (name = this._apply((function () {return this.identifierTokenOperatorHandler("identifier");})));}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (args = this._apply((function () {return this._apply(this.delimited, (function () {return this.identifierTokenOperatorHandler("identifier");}), (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (stmts = this._apply(this.functionBody));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('FunctionDeclaration', {name: name.value, 
      argumentNames: args.map(function (elem) {return elem.value})}).concat(stmts)
  );}));}));
},

functionExpression: function () {
var name, args, stmts;
return this._apply((function () {return this._concat((function () {return this.identifierTokenOperatorHandler("function");}),
(function () {return (name = this._apply((function () {return this._optional((function () {return this.identifierTokenOperatorHandler("identifier");}));})));}),
(function () {return this.stringTokenOperatorHandler('(');}),
(function () {return (args = this._apply((function () {return this._apply(this.delimited, (function () {return this.identifierTokenOperatorHandler("identifier");}), (function () {return this.stringTokenOperatorHandler(',');}));})));}),
(function () {return this.stringTokenOperatorHandler(')');}),
(function () {return this.stringTokenOperatorHandler('{');}),
(function () {return (stmts = this._apply(this.functionBody));}),
(function () {return this.stringTokenOperatorHandler('}');}),
(function () {return ( Ast('FunctionExpression', {name: (name ? name.value : null), 
      argumentNames: args.map(function (elem) {return elem.value})}).concat(stmts)
  );}));}));
},

functionBody: function () {
return this._apply((function () {return this._repeat(this.sourceElement);}));
},

program: function () {
var stmts;
return this._apply((function () {return this._concat((function () {return (stmts = this._apply((function () {return this._repeat(this.sourceElement);})));}),
this.eof,
(function () {return ( Ast('Program').concat(stmts)
  );}));}));
},

sourceElement: function () {
return this._apply((function () {return this._choice(this.statement,
this.functionDeclaration);}));
},

newline: function () {
var token;
return this._apply((function () {return this._choice((function () {return this._concat((function () {return (token = this._apply((function () {return this._lookahead(this.anything);})));}),
(function () {return this._predicate((function () {return (token.preceededByNewline);}));}));}),
this.eof);}));
},

defaultTokenOperatorHandler: function (what) {
return this._apply((function () {return this._apply(this.error, "Cannot use default tokenOperatorHandler");}));
},

stringTokenOperatorHandler: function (string) {
return this._apply((function () {return this._apply(this.getNextToken, string);}));
},

identifierTokenOperatorHandler: function (name) {
return this._apply((function () {return this._apply(this.getNextToken, name);}));
},

getNextToken: function (tag) {
return this._apply((function () {
      var token;
      if (tag === '/' || tag === '/=') {
        token = this.input.current.readReplacing(['unknown', 'regex'], 'division');
      } else if (tag === 'regex') {
        token = this.input.current.readReplacing(['unknown', 'division'], 'regex');
      } else {
        token = this.input.current.read();
      }
      
      if (token.is(tag)) {
        return token;
      } else {
        this._fail();
      }
    }));
},

eof: function () {
return this._apply((function () {return this._apply(this.getNextToken, 'eof');}));
}

});
