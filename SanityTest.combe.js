// Generated by Combe compiler
"use strict";
(function () {
var __combe = require("combe-newcombe/Runtime/__combe");
var __combe$break = __combe.break;
var __combe$continue = __combe.continue;
var Range = __combe.Range;
__combe$this = null;
__combe$return = null;
try {
var assert = require("assert");
console.log("Check 1 - console.log");
console.log("Check 2 - basic if statements");
assert((/* if */ true
? /* then */ true
: /* else */ false));
assert(!((/* if */ true
? /* then */ false
: /* else */ true)));
console.log("Check 3 - basic logic combinators");
assert(__combe.infixOperators["&&"](true, true));
assert(__combe.infixOperators["||"](false, true));
assert(__combe.infixOperators["&&"](true, __combe.infixOperators["||"](false, true)));
console.log("Check 4 - basic equality");
assert(__combe.infixOperators["=="](1, 1));
assert(__combe.infixOperators["!="](1, 47));
assert(__combe.infixOperators["=="]("Hello world", "Hello world"));
assert(__combe.infixOperators["!="]("2", 2));
assert(__combe.infixOperators["!="]("", null));
assert(__combe.infixOperators["!="](0, null));
assert(__combe.infixOperators["=="](true, true));
assert(__combe.infixOperators["=="](false, false));
assert(__combe.infixOperators["!="](true, false));
assert(__combe.infixOperators["!="](true, null));
assert(__combe.infixOperators["!="](false, null));
assert(__combe.infixOperators["=="](null, null));
assert(__combe.infixOperators["<"](4, 8));
assert(__combe.infixOperators["==="](1, 1));
assert(__combe.infixOperators["!=="](1, 47));
assert(__combe.infixOperators["==="]("Hello world", "Hello world"));
assert(__combe.infixOperators["!=="]("2", 2));
assert(__combe.infixOperators["!=="]("", null));
assert(__combe.infixOperators["!=="](0, null));
assert(__combe.infixOperators["==="](true, true));
assert(__combe.infixOperators["==="](false, false));
assert(__combe.infixOperators["!=="](true, false));
assert(__combe.infixOperators["!=="](true, null));
assert(__combe.infixOperators["!=="](false, null));
assert(__combe.infixOperators["!=="](null, null));
console.log("Check 5 - basic function definition/call");
var fn = function fn() {
(function () {
(function () { throw (__combe$return = { value: "Hello world" }); })();
})()};
assert(__combe.infixOperators["=="](fn(), "Hello world"));
console.log("Check 6 - basic try/catch");
var fn = function fn() {
(function () {
(function () { throw 42; })();
})()};
(function () {
try {
(function () {
fn();
})();
}
catch (e) {
(function () {
assert(__combe.infixOperators["=="](e, 42));
})();
}
})();
console.log("Done");
}
catch (__combe$e) {
if (__combe$e === __combe$return) return __combe$return;
throw __combe$e;
}
})()