// Generated by Combe compiler
"use strict";
if (!__combe_runtimeLoaded) throw new Error("Combe runtime not loaded");
(function () {
var __combe_this = null;
var __combe_return = null;
try {
var fs = require("fs");
null;
var path = require("path");
null;
var inspect = require("util")["inspect"];
null;
var CombeLexer = require("./CombeLexer");
null;
var CombeParser = require("./CombeParser");
null;
var CombeAstToJS = require("./CombeAstToJS");
null;
var Compiler = (module["exports"] = (function () {
var __combe_object = {};
__combe_defineValueProperty(__combe_object, "shouldOutputIntermediates", false);
__combe_defineValueProperty(__combe_object, "compile", (function (sourceFilename, outputFilename, options) {
var __combe_this = this;
var __combe_return = null;
try {
return (function () {
(/* if */ __combe_infixOperators["=="](outputFilename, null)
? /* then */ (function () {
var ext = path.extname(sourceFilename);
(/* if */ (ext === ".combe")
? /* then */ (function () {
(outputFilename = sourceFilename.replace(/\.combe$/i, ".combejs"));
})()
: /* else */ (function () {
(outputFilename = (sourceFilename + ".combejs"));
})());
})()
: /* else */ null);
(options["source"] = sourceFilename);
(options["output"] = outputFilename);
var source = fs.readFileSync(sourceFilename, "utf8");
var hashbangLine = __combe_this.hashbangLine(source);
(/* if */ __combe_infixOperators["!="](hashbangLine, null)
? /* then */ (function () {
(source = source.slice(hashbangLine.subscript(0)["length"]));
})()
: /* else */ null);
var parser = CombeParser.new(source, sourceFilename);
var ast = parser.match();
__combe_this.writeIntermediate(options, "tokens", parser["tokens"]);
__combe_this.writeIntermediate(options, "ast", ast);
var jsIOList = CombeAstToJS.translateToIOList(ast);
__combe_this.writeIntermediate(options, "iolist", jsIOList);
var jsText = Array.deepJoinIOList(jsIOList);
fs.writeFileSync(outputFilename, jsText);
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "log", (function (message) {
var __combe_this = this;
var __combe_return = null;
try {
return (function () {
console.log(((process["command"] + ": ") + message));
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "writeIntermediate", (function (options, name, object) {
var __combe_this = this;
var __combe_return = null;
try {
return (function () {
var outputFilename = options.subscript(name);
(/* if */ (__combe_infixOperators["=="](outputFilename, null) && options["intout"])
? /* then */ (function () {
(outputFilename = (((options["source"] + ".") + name) + "~"));
})()
: /* else */ null);
(/* if */ outputFilename
? /* then */ (function () {
var output = inspect(object, false, null);
fs.writeFileSync(outputFilename, output);
})()
: /* else */ null);
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
__combe_defineValueProperty(__combe_object, "hashbangLine", (function (source) {
var __combe_this = this;
var __combe_return = null;
try {
return (function () {
(function () { throw (__combe_return = { value: source.match(/^#![^\r\n]*(\r\n|\r|\n)/) }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
}));
return __combe_object;
})());
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
})();