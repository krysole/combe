//
// Combe - Improved JavaScript with Pattern Matching
//
// Copyright 2012 Lorenz Pretterhofer <krysole@alexicalmistake.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//

var fs = require('fs');
var path = require('path');
var inspect = require('util').inspect;

var CombeLexer = require('./CombeLexer');
var CombeParser = require('./CombeParser');
var CombeAstToJS = require('./CombeAstToJS');

var Compiler = module.exports = {
  
  shouldOutputIntermediates: false,
  
  compile(sourceFilename, outputFilename, options) {
    if (outputFilename == null) {
      var ext = path.extname(sourceFilename);
      if (ext === '.combe') {
        outputFilename = sourceFilename.replace(r/\.combe$/i, '.combejs');
      }
      else {
        outputFilename = sourceFilename + '.combejs';
      }
    }
    options.source = sourceFilename;
    options.output = outputFilename;
    
    var source = fs.readFileSync(sourceFilename, 'utf8');
    
    var hashbangLine = this.hashbangLine(source);
    if (hashbangLine != null) {
      source = source.slice(hashbangLine[0].length);
    }
    
    var parser = CombeParser.new(source, sourceFilename);
    var ast = parser.match();
    this.writeIntermediate(options, 'tokens', parser.tokens);
    this.writeIntermediate(options, 'ast', ast);
    
    var jsIOList = CombeAstToJS.translateToIOList(ast);
    this.writeIntermediate(options, 'iolist', jsIOList);
    
    var jsText = Array.deepJoinIOList(jsIOList);
    
    fs.writeFileSync(outputFilename, jsText);
  },
  
  log(message) {
    console.log(process.command + ': ' + message);
  },
  
  writeIntermediate(options, name, object) {
    var outputFilename = options[name];
    if (outputFilename == null && options.intout) {
      outputFilename = options.source + '.' + name + '~';
    }
    if (outputFilename) {
      var output = inspect(object, false, null);
      fs.writeFileSync(outputFilename, output);
    }
  },
  
  hashbangLine(source) {
    return source.match(r/^#![^\r\n]*(\r\n|\r|\n)/);
  },
  
};
