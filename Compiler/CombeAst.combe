//
// Combe - Improved JavaScript with Pattern Matching
//
// Copyright 2012 Lorenz Pretterhofer <krysole@alexicalmistake.com>
//
// Permission to use, copy, modify, and distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//

var CombeAst = module.exports = Ast.subclass({
  
  types: {
    Script:                 ['statements'],
    
    VarStatement:           ['declarations'],
    
    If:                     ['condition', 'consiquent', 'alternative'],
    While:                  ['condition', 'body'],
    DoWhile:                ['body', 'condition'],
    For:                    ['initialize', 'condition', 'increment', 'body'],
    ForDeclaring:           ['declarations', 'condition', 'increment', 'body'],
    TryCatch:               ['tryBody', 'catchVariable', 'catchBody', 'finallyBody'],
    Throw:                  ['argument'],
    Return:                 ['argument'],
    Break:                  [],
    Continue:               [],
    Sequence:               ['expressions'],
    
    Assignment:             ['lhs', 'rhs'],
    OperatorAssignment:     ['name', 'lhs', 'rhs'],
    PrefixOperator:         ['name', 'argument'],
    PostfixOperator:        ['name', 'argument'],
    InfixOperator:          ['name', 'lhs', 'rhs'],

    Call:                   ['function', 'arguments'],
    Subscript:              ['subject', 'arguments'],
    MethodCall:             ['subject', 'name', 'arguments'],
    Dot:                    ['subject', 'name'],
    
    InclusiveRange:         ['lhs', 'rhs'],
    ExclusiveRange:         ['lhs', 'rhs'],
    This:                   [],
    Variable:               ['name'],
    Literal:                ['value'],
    Array:                  ['elements'],
    Object:                 ['properties'],
    
    
    Function:               ['parameters', 'body'],
    Rule:                   ['parameters', 'body'],
    
    VariableDeclaration:    ['name', 'expression'],
    
    Block:                  ['statements'],
    
    ValueProperty:          ['name', 'value'],
    GetProperty:            ['name', 'value'],
    SetProperty:            ['name', 'value'],
    DescribeProperty:       ['name', 'value'],
    
    
    ChoicePattern:          ['patterns'],
    SequencePattern:        ['patterns'],
    
    NotPattern:             ['pattern'],
    LookaheadPattern:       ['pattern'],
    HashOperatorPattern:    ['pattern'],
    
    RepeatPattern:          ['pattern'],
    NonZeroRepeatPattern:   ['pattern'],
    OptionalPattern:        ['pattern'],
    BindPattern:            ['pattern', 'name'],
    
    CallPattern:            ['pattern', 'arguments'],
    
    PredicatePattern:       ['body'],
    ActionPattern:          ['body'],
    ImmediateActionPattern: ['body'],
    StringPattern:          ['value'],
    VariablePattern:        ['name'],
  },
  
}, {});