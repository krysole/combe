// Generated by Combe compiler
"use strict";
if (!__combe_runtimeLoaded) throw new Error("Combe runtime not loaded");
(function () {
var __combe_this = null;
var __combe_return = null;
try {
var assert = require("assert");
console.log("Check 1 - console.log");
console.log("Check 2 - basic if statements");
assert((/* if */ true
? /* then */ true
: /* else */ false));
assert((!(/* if */ true
? /* then */ false
: /* else */ true)));
console.log("Check 3 - basic logic combinators");
assert((true && true));
assert((false || true));
assert((true && (false || true)));
console.log("Check 4 - basic equality");
assert(__combe_infixOperators["=="](1, 1));
assert(__combe_infixOperators["!="](1, 47));
assert(__combe_infixOperators["=="]("Hello world", "Hello world"));
assert(__combe_infixOperators["!="]("2", 2));
assert(__combe_infixOperators["!="]("", null));
assert(__combe_infixOperators["!="](0, null));
assert(__combe_infixOperators["=="](true, true));
assert(__combe_infixOperators["=="](false, false));
assert(__combe_infixOperators["!="](true, false));
assert(__combe_infixOperators["!="](true, null));
assert(__combe_infixOperators["!="](false, null));
assert(__combe_infixOperators["=="](null, undefined));
assert((4 < 8));
assert((1 === 1));
assert((1 !== 47));
assert(("Hello world" === "Hello world"));
assert(("2" !== 2));
assert(("" !== null));
assert((0 !== null));
assert((true === true));
assert((false === false));
assert((true !== false));
assert((true !== null));
assert((false !== null));
assert((null !== undefined));
console.log("Check 5 - basic function definition/call");
var fn = (function () {
var __combe_this = this;
var __combe_return = null;
try {
return (function () {
(function () { throw (__combe_return = { value: "Hello world" }); })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
});
assert(__combe_infixOperators["=="](fn(), "Hello world"));
var fn = (function () {
var __combe_this = this;
var __combe_return = null;
try {
return 23;
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
});
assert(__combe_infixOperators["=="](fn(), 23));
console.log("Check 6 - basic try/catch");
var fn = (function () {
var __combe_this = this;
var __combe_return = null;
try {
return (function () {
(function () { throw 42; })();
})();
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
});
(function () {
try {
(function () {
fn();
})();
}
catch (e) {
(function () {
assert(__combe_infixOperators["=="](e, 42));
})();
}
})();
console.log("Check 7 - basic object manipulation");
var o = (function () {
var __combe_object = {};
__combe_defineValueProperty(__combe_object, "a", 1);
__combe_defineValueProperty(__combe_object, "b", 2);
__combe_defineValueProperty(__combe_object, "c", "hello");
return __combe_object;
})();
(o["a"] = 3);
(o["c"] = (o["a"] + o["b"]));
assert(__combe_infixOperators["=="](o["c"], 5));
var fn = (function () {
var __combe_this = this;
var __combe_return = null;
try {
return 23;
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
});
(o["f"] = fn);
assert(__combe_infixOperators["=="](o["f"], fn));
assert(__combe_infixOperators["=="](o.f(), 23));
console.log("Done");
}
catch (__combe_e) {
if (__combe_e === __combe_return) return __combe_return.value;
throw __combe_e;
}
})()